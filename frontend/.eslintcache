[{"/Users/davidcao/dev/RedditStocks/frontend/src/index.js":"1","/Users/davidcao/dev/RedditStocks/frontend/src/App.js":"2","/Users/davidcao/dev/RedditStocks/frontend/src/reportWebVitals.js":"3","/Users/davidcao/dev/RedditStocks/frontend/src/components/Nav.js":"4","/Users/davidcao/dev/RedditStocks/frontend/src/components/TIckers.js":"5","/Users/davidcao/dev/RedditStocks/frontend/src/components/Contact.js":"6","/Users/davidcao/dev/RedditStocks/frontend/src/components/About.js":"7","/Users/davidcao/dev/RedditStocks/frontend/src/components/EnterSecret.js":"8","/Users/davidcao/dev/RedditStocks/frontend/src/components/Tickers.js":"9","/Users/davidcao/dev/RedditStocks/frontend/src/components/Socket.js":"10","/Users/davidcao/dev/RedditStocks/frontend/src/components/TickerTable.js":"11"},{"size":500,"mtime":1630103987137,"results":"12","hashOfConfig":"13"},{"size":3717,"mtime":1634279998347,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1630103987138,"results":"15","hashOfConfig":"13"},{"size":661,"mtime":1634051052164,"results":"16","hashOfConfig":"13"},{"size":6307,"mtime":1630536344903,"results":"17","hashOfConfig":"13"},{"size":757,"mtime":1634060736006,"results":"18","hashOfConfig":"13"},{"size":357,"mtime":1634060620895,"results":"19","hashOfConfig":"13"},{"size":915,"mtime":1630208182400,"results":"20","hashOfConfig":"13"},{"size":6308,"mtime":1633992765394,"results":"21","hashOfConfig":"13"},{"size":7919,"mtime":1634297533720,"results":"22","hashOfConfig":"13"},{"size":2805,"mtime":1634273636606,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"gvwl0a",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"26"},"/Users/davidcao/dev/RedditStocks/frontend/src/index.js",[],["56","57"],"/Users/davidcao/dev/RedditStocks/frontend/src/App.js",[],"/Users/davidcao/dev/RedditStocks/frontend/src/reportWebVitals.js",[],"/Users/davidcao/dev/RedditStocks/frontend/src/components/Nav.js",["58","59"],"import './Nav.sass'\nimport React, { useEffect } from 'react'\n\nimport { Link } from 'react-router-dom'\n\nexport default function () {\n   \n    return (\n        <nav className='nav'>\n            <h1 className='logo'>Popular Tickers</h1>\n            <ul className='nav-links'>\n                <Link to={'/'}>\n                    <li className='nav-link'>Home</li>\n                </Link>\n                <Link to={'/about'}>\n                    <li className='nav-link'>About</li>\n                </Link>\n                <Link to={'/contact'}>\n                    <li className='nav-link'>Contact</li>\n                </Link>\n            </ul>\n        </nav>\n    )\n}","/Users/davidcao/dev/RedditStocks/frontend/src/components/TIckers.js",["60","61","62"],"import React, { useEffect, useState, useRef } from 'react'\nimport styles from \"./Tickers.module.sass\"\nimport './icons.css'\n\nimport axios from 'axios'\n\n// const serverURL = `https://redditstocks.herokuapp.com/`\nconst serverURL = 'http://127.0.0.1:5000/'\n\nconst subreddits = [\n    'wallstreetbets',\n    'stocks',\n    'pennystocks',\n    'spacs',\n    'investing',\n    'options',\n    'robinhood',\n]\n\n\nexport default function () {\n    return (\n        <div>\n            {\n                subreddits.map(sub => <TicksFromSub subreddit={sub}/>)\n            }\n        </div>\n    )\n}\n\nfunction TicksFromSub({ subreddit }) {\n    const [data, updateData] = useState()\n    const alreadySynced = useRef(false)\n\n    axios.get(serverURL + subreddit, {\n        headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS',\n        }})\n    .then(res => {\n        if (!alreadySynced.current) {\n            updateData(res.data)\n            alreadySynced.current = true   \n        }\n    })\n\n    let tickerRows = []\n    if (data) {\n        console.log(data['tickers'])\n        let keys = Object.keys(data.tickers)\n        // limit to 20 tickers\n        keys = keys.slice(0, 20)\n        // sort the tickers by mention count\n        keys.sort((a, b) => data.tickers[b].count - data.tickers[a].count )\n        \n        for (const key of keys) {\n            tickerRows.push(\n                <TickerRow {...data.tickers[key]} ticker={key} key={key}/>\n            )\n        }\n    }\n\n    const loaded = data ? true : false\n    const dataIsEmpty = !data || Object.keys(data.tickers).length == 0    \n\n    const noTickers = (\n        <div>Didn't find enough stocks being discussed.</div>\n    )\n    const tickerTable = (\n        <table className={styles.table}>\n            <thead>\n            <tr>\n                <th className={styles.left}>Ticker</th>\n                <th>Mentions</th>\n                <th>Positive Strength</th>\n                <th>Negative Strength</th>\n                <th>% positive</th>\n                <th>% Neutral</th>\n                <th>% Negative</th>\n            </tr>\n            </thead>\n            <tbody>{tickerRows}</tbody>\n        </table>\n    )\n    // last updated time\n    let newTime\n    let LUTTime\n    if (data) {\n        const date_from_data = data['last_updated'].slice(0, 10).split('-')\n        const time_from_data = data['last_updated'].slice(-8).split(':')\n        newTime = new Date(Date.UTC(...date_from_data, ...time_from_data))\n\n        const LUTDate = `${newTime.getUTCFullYear()}-${newTime.getUTCMonth()}-${newTime.getUTCDate()}`\n        const LUTHour = newTime.getHours() > 12 ? newTime.getHours()-12 : newTime.getHours()\n        const LUTMinute = newTime.getMinutes() > 10 ? newTime.getMinutes() : '0' + newTime.getMinutes()\n        LUTTime = LUTHour + ':' + LUTMinute\n        LUTTime = newTime.getHours() > 12 ? LUTTime+'PM' : LUTTime+'AM'\n        LUTTime = LUTDate+' '+LUTTime\n    }\n    const main_section = (\n        <>\n        <div className={styles.title}>\n            <h1 className={styles.sub}>r/{subreddit}</h1>\n            <div className={styles.lastUpdated}>\n                <p>Last updated:</p>\n                <p>{LUTTime}</p>\n            </div>\n        </div>\n        { dataIsEmpty ? noTickers : tickerTable } \n        </>\n    )\n    const loader = (\n        <>\n        <div class={styles.left}>{'Scraping data from r/' + subreddit + '... it can take a minute'}</div>\n        <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n        </>\n    )\n\n        \n    return (\n        <div className={styles.ctn}>\n            { loaded ? main_section : loader }\n        </div>\n    )\n}\n\nfunction ToolTip({ children, tooltext, className, childClassNames, onClick }) {\n    const [pos, setPos] = useState()\n    const [showChild, setShow] = useState(false)\n    function updatePos(e) {\n        setShow(true)\n        setPos({\n            left: e.clientX + 15,\n            top: e.clientY + 10,\n        })    \n    }\n    return (\n        <div\n            className={`${className} ${styles.tooltip}`}\n            onMouseMove={updatePos}\n            onMouseLeave={() => setShow(false)}\n            onClick={onClick}\n        >\n            {children}\n            {showChild && (\n                <div\n                    className={`${childClassNames} ${styles.tooltext}`}\n                    style={pos ? pos : null}\n                >\n                    {tooltext}\n                </div>\n            )} \n        </div>\n    )\n}\n\nfunction TickerRow({ ticker, count, pos_sent, pos_sent_cnt=0, neg_sent, neg_sent_cnt=0, neut_sent_cnt=0}) {\n    const [show, setShow] = useState(true)\n    let total_sent_cnt = pos_sent_cnt + neg_sent_cnt + neut_sent_cnt\n    const pos_strength = pos_sent && (pos_sent*100).toFixed(0)\n    const neg_strength = neg_sent && (neg_sent*100).toFixed(0)\n\n    const sent_percent = sent_cnt => sent_cnt > 0 ? (sent_cnt / total_sent_cnt * 100).toFixed(2) + '%' : null\n\n    const blacklistSecret = localStorage.getItem(\"blacklistSecret\")\n    \n    function blacklistTicker() {\n        axios.post(serverURL + \"blacklist_ticker\", {\n            ticker,\n            secret: blacklistSecret\n        })\n        setShow(false)\n    }\n\n    function googleTicker() {\n        window.open(\"https://www.google.com/search?q=\" + ticker,'_blank')\n    }\n    if(!show) return null\n    return (\n        <tr>\n            <td className={`${styles.left}`} onClick={googleTicker}>\n                {\n                    blacklistSecret ?\n                        <ToolTip tooltext={'Open chart'} >\n                            {ticker}\n                        </ToolTip>\n                        : ticker\n                }\n            </td>\n            <td>{count}</td>\n            <td>{pos_strength || 0}</td>\n            <td>{neg_strength || 0}</td>\n            <td>{sent_percent(pos_sent_cnt) || \"0%\"}</td>\n            <td>{sent_percent(neut_sent_cnt) || \"0%\"}</td>\n            <td>{sent_percent(neg_sent_cnt) || \"0%\"}</td>\n            {\n                    blacklistSecret &&\n                        <ToolTip tooltext={'Blacklist this ticker'} className={styles.remove} onClick={blacklistTicker}>\n                            X\n                        </ToolTip>\n            }\n        </tr>\n    )\n}\n",["63","64"],"/Users/davidcao/dev/RedditStocks/frontend/src/components/Contact.js",["65","66","67","68"],"import './Contact.sass'\nimport React, { useEffect, useState, useRef } from 'react'\n\nexport default function () {\n    \n    return (\n        <div className='contact'>            \n            <h1>\n                Contact\n            </h1>\n            <div>\n                    Suggestions? Comments?\n            </div>\n            <br/>\n            <div className='contact-comment'>\n                <textarea className='contact-text-area' name=\"\" id=\"\" cols=\"30\" rows=\"10\" value=\"Not yet implemented.\" readOnly></textarea>\n                <br/>\n                <div className='submit'>\n                    Submit\n                </div>\n            </div>\n            <br/>\n            <br />\n            <a href=\"/\">👈 Back to home</a>\n        </div>\n    )\n}","/Users/davidcao/dev/RedditStocks/frontend/src/components/About.js",["69","70","71","72"],"import './About.sass'\nimport React, { useEffect, useState, useRef } from 'react'\n\nexport default function () {\n    \n    return (\n        <div className='about'>            \n            <h1>\n                Find out what stocks Reddit is talking about!\n            </h1>\n\n            <br/>\n            <a href=\"/\">👈 Back to home</a>\n        </div>\n    )\n}","/Users/davidcao/dev/RedditStocks/frontend/src/components/EnterSecret.js",["73","74","75","76"],"import React, { useEffect, useState, useRef } from 'react'\n\nexport default function () {\n    function storeSecret() {\n        const secret = document.querySelector('#textArea').value\n        localStorage.setItem(\"blacklistSecret\", secret)\n        document.querySelector(\"#currentSecret\").textContent = localStorage.getItem(\"blacklistSecret\")\n    }\n    \n    return (\n        <div className='about'>            \n            <div className='contact-comment'>\n                <p id=\"currentSecret\">{localStorage.getItem(\"blacklistSecret\") || \"\"}</p>\n                <textarea className='contact-text-area' name=\"\" id=\"textArea\" cols=\"30\" rows=\"10\"></textarea>\n                <br/>\n                <div className='submit' onClick={storeSecret}>\n                    Submit\n                </div>\n            </div>\n            <br/>\n            <br />\n            <a href=\"/\">👈 Back to home</a>\n        </div>\n    )\n}","/Users/davidcao/dev/RedditStocks/frontend/src/components/Tickers.js",["77","78","79"],"import React, { useEffect, useState, useRef } from 'react'\nimport styles from \"./Tickers.module.sass\"\nimport './icons.css'\n\nimport axios from 'axios'\n\n// const serverURL = `https://redditstocks.herokuapp.com/`\nconst serverURL = 'http://127.0.0.1:5000/'\n\nconst subreddits = [\n    'wallstreetbets',\n    'stocks',\n    'pennystocks',\n    'spacs',\n    'investing',\n    'options',\n    'robinhood',\n]\n\n\nexport default function () {\n    return (\n        <div>\n            {\n                subreddits.map(sub => <TicksFromSub subreddit={sub}/>)\n            }\n        </div>\n    )\n}\n\nfunction TicksFromSub({ subreddit }) {\n    const [data, updateData] = useState()\n    const alreadySynced = useRef(false)\n\n    axios.get(serverURL + subreddit, {\n        headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS',\n        }})\n    .then(res => {\n        if (!alreadySynced.current) {\n            updateData(res.data)\n            alreadySynced.current = true   \n        }\n    })\n\n    let tickerRows = []\n    if (data) {\n        console.log(data['tickers'])\n        let keys = Object.keys(data.tickers)\n        // limit to 20 tickers\n        keys = keys.slice(0, 20)\n        // sort the tickers by mention count\n        keys.sort((a, b) => data.tickers[b].count - data.tickers[a].count )\n        \n        for (const key of keys) {\n            tickerRows.push(\n                <TickerRow {...data.tickers[key]} ticker={key} key={key}/>\n            )\n        }\n    }\n\n    const loaded = data ? true : false\n    const dataIsEmpty = !data || Object.keys(data.tickers).length == 0    \n\n    const noTickers = (\n        <div>Didn't find enough stocks being discussed.</div>\n    )\n\n    const tickerTable = (\n        <table className={styles.table}>\n            <thead>\n            <tr>\n                <th className={styles.left}>Ticker</th>\n                <th>Mentions</th>\n                <th>Positive Strength</th>\n                <th>Negative Strength</th>\n                <th>% positive</th>\n                <th>% Neutral</th>\n                <th>% Negative</th>\n            </tr>\n            </thead>\n            <tbody>{tickerRows}</tbody>\n        </table>\n    )\n    // last updated time\n    let newTime\n    let LUTTime\n    if (data) {\n        const date_from_data = data['last_updated'].slice(0, 10).split('-')\n        const time_from_data = data['last_updated'].slice(-8).split(':')\n        newTime = new Date(Date.UTC(...date_from_data, ...time_from_data))\n\n        const LUTDate = `${newTime.getUTCFullYear()}-${newTime.getUTCMonth()}-${newTime.getUTCDate()}`\n        const LUTHour = newTime.getHours() > 12 ? newTime.getHours()-12 : newTime.getHours()\n        const LUTMinute = newTime.getMinutes() > 10 ? newTime.getMinutes() : '0' + newTime.getMinutes()\n        LUTTime = LUTHour + ':' + LUTMinute\n        LUTTime = newTime.getHours() > 12 ? LUTTime+'PM' : LUTTime+'AM'\n        LUTTime = LUTDate+' '+LUTTime\n    }\n    const main_section = (\n        <>\n        <div className={styles.title}>\n            <h1 className={styles.sub}>r/{subreddit}</h1>\n            <div className={styles.lastUpdated}>\n                <p>Last updated:</p>\n                <p>{LUTTime}</p>\n            </div>\n        </div>\n        { dataIsEmpty ? noTickers : tickerTable } \n        </>\n    )\n    const loader = (\n        <>\n        <div class={styles.left}>{'Scraping data from r/' + subreddit + '... it can take a minute'}</div>\n        <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n        </>\n    )\n\n        \n    return (\n        <div className={styles.ctn}>\n            { loaded ? main_section : loader }\n        </div>\n    )\n}\n\nfunction ToolTip({ children, tooltext, className, childClassNames, onClick }) {\n    const [pos, setPos] = useState()\n    const [showChild, setShow] = useState(false)\n    function updatePos(e) {\n        setShow(true)\n        setPos({\n            left: e.clientX + 15,\n            top: e.clientY + 10,\n        })    \n    }\n    return (\n        <div\n            className={`${className} ${styles.tooltip}`}\n            onMouseMove={updatePos}\n            onMouseLeave={() => setShow(false)}\n            onClick={onClick}\n        >\n            {children}\n            {showChild && (\n                <div\n                    className={`${childClassNames} ${styles.tooltext}`}\n                    style={pos ? pos : null}\n                >\n                    {tooltext}\n                </div>\n            )} \n        </div>\n    )\n}\n\nfunction TickerRow({ ticker, count, pos_sent, pos_sent_cnt=0, neg_sent, neg_sent_cnt=0, neut_sent_cnt=0}) {\n    const [show, setShow] = useState(true)\n    let total_sent_cnt = pos_sent_cnt + neg_sent_cnt + neut_sent_cnt\n    const pos_strength = pos_sent && (pos_sent*100).toFixed(0)\n    const neg_strength = neg_sent && (neg_sent*100).toFixed(0)\n\n    const sent_percent = sent_cnt => sent_cnt > 0 ? (sent_cnt / total_sent_cnt * 100).toFixed(2) + '%' : null\n\n    const blacklistSecret = localStorage.getItem(\"blacklistSecret\")\n    \n    function blacklistTicker() {\n        axios.post(serverURL + \"blacklist_ticker\", {\n            ticker,\n            secret: blacklistSecret\n        })\n        setShow(false)\n    }\n\n    function googleTicker() {\n        window.open(\"https://www.google.com/search?q=\" + ticker,'_blank')\n    }\n    if(!show) return null\n    return (\n        <tr>\n            <td className={`${styles.left}`} onClick={googleTicker}>\n                {\n                    blacklistSecret ?\n                        <ToolTip tooltext={'Open chart'} >\n                            {ticker}\n                        </ToolTip>\n                        : ticker\n                }\n            </td>\n            <td>{count}</td>\n            <td>{pos_strength || 0}</td>\n            <td>{neg_strength || 0}</td>\n            <td>{sent_percent(pos_sent_cnt) || \"0%\"}</td>\n            <td>{sent_percent(neut_sent_cnt) || \"0%\"}</td>\n            <td>{sent_percent(neg_sent_cnt) || \"0%\"}</td>\n            {\n                    blacklistSecret &&\n                        <ToolTip tooltext={'Blacklist this ticker'} className={styles.remove} onClick={blacklistTicker}>\n                            X\n                        </ToolTip>\n            }\n        </tr>\n    )\n}\n",["80","81"],"/Users/davidcao/dev/RedditStocks/frontend/src/components/Socket.js",["82","83","84","85","86","87","88","89","90","91"],"/Users/davidcao/dev/RedditStocks/frontend/src/components/TickerTable.js",["92","93","94","95"],"import React, { useEffect, useState } from 'react'\nimport \"./TickerTable.sass\"\n\n// tickers: sorted by mentions in App.js\nexport default function({ tickers }) {\n    const tickerRows = tickers?.map(ticker => {\n        if (ticker.count <= 2) return\n        return <TickerRow ticker={ticker['name']} count={ticker['count']} key={ticker['name']}/>\n    })\n    return (\n        <div className=\"stats\">\n            <h1>Stats</h1>\n            <table className='table'>\n                <thead>\n                <tr>\n                    <th className='left'>Ticker</th>\n                    <th>Mentions</th>\n                    <th>Positive</th>\n                    <th>Negative</th>\n                    <th>Positive %</th>\n                    <th>Neutral %</th>\n                    <th>Negative %</th>\n                </tr>\n                </thead>\n                <tbody>\n                    {tickerRows}\n                </tbody>\n            </table>\n        </div>\n    )    \n}\n\nfunction TickerRow({ ticker, count, pos_sent, pos_sent_cnt=0, neg_sent, neg_sent_cnt=0, neut_sent_cnt=0}) {\n    const [show, setShow] = useState(true)\n    let total_sent_cnt = pos_sent_cnt + neg_sent_cnt + neut_sent_cnt\n    const pos_strength = pos_sent && (pos_sent*100).toFixed(0)\n    const neg_strength = neg_sent && (neg_sent*100).toFixed(0)\n\n    const sent_percent = sent_cnt => sent_cnt > 0 ? (sent_cnt / total_sent_cnt * 100).toFixed(2) + '%' : null\n\n    // const blacklistSecret = localStorage.getItem(\"blacklistSecret\")\n    \n    // function blacklistTicker() {\n    //     axios.post(serverURL + \"blacklist_ticker\", {\n    //         ticker,\n    //         secret: blacklistSecret\n    //     })\n    //     setShow(false)\n    // }\n\n    function googleTicker() {\n        window.open(\"https://www.google.com/search?q=\" + ticker,'_blank')\n    }\n    if(!show) return null\n    return (\n        <tr>\n            <td className='left' onClick={googleTicker}>\n                {\n                    // blacklistSecret ?\n                    //     // <ToolTip tooltext={'Open chart'} >\n                    //     //     {ticker}\n                    //     // </ToolTip>\n                    //     : ticker\n                    ticker\n                }\n            </td>\n            <td>{count}</td>\n            <td>{pos_strength || 0}</td>\n            <td>{neg_strength || 0}</td>\n            <td>{sent_percent(pos_sent_cnt) || \"0%\"}</td>\n            <td>{sent_percent(neut_sent_cnt) || \"0%\"}</td>\n            <td>{sent_percent(neg_sent_cnt) || \"0%\"}</td>\n            {\n                    // blacklistSecret &&\n                    //     <ToolTip tooltext={'Blacklist this ticker'} className={styles.remove} onClick={blacklistTicker}>\n                    //         X\n                    //     </ToolTip>\n            }\n        </tr>\n    )\n}",{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":2,"column":17,"nodeType":"102","messageId":"103","endLine":2,"endColumn":26},{"ruleId":"104","severity":1,"message":"105","line":6,"column":1,"nodeType":"106","endLine":24,"endColumn":2},{"ruleId":"100","severity":1,"message":"101","line":1,"column":17,"nodeType":"102","messageId":"103","endLine":1,"endColumn":26},{"ruleId":"104","severity":1,"message":"105","line":21,"column":1,"nodeType":"106","endLine":29,"endColumn":2},{"ruleId":"107","severity":1,"message":"108","line":64,"column":67,"nodeType":"109","messageId":"110","endLine":64,"endColumn":69},{"ruleId":"96","replacedBy":"111"},{"ruleId":"98","replacedBy":"112"},{"ruleId":"100","severity":1,"message":"101","line":2,"column":17,"nodeType":"102","messageId":"103","endLine":2,"endColumn":26},{"ruleId":"100","severity":1,"message":"113","line":2,"column":28,"nodeType":"102","messageId":"103","endLine":2,"endColumn":36},{"ruleId":"100","severity":1,"message":"114","line":2,"column":38,"nodeType":"102","messageId":"103","endLine":2,"endColumn":44},{"ruleId":"104","severity":1,"message":"105","line":4,"column":1,"nodeType":"106","endLine":27,"endColumn":2},{"ruleId":"100","severity":1,"message":"101","line":2,"column":17,"nodeType":"102","messageId":"103","endLine":2,"endColumn":26},{"ruleId":"100","severity":1,"message":"113","line":2,"column":28,"nodeType":"102","messageId":"103","endLine":2,"endColumn":36},{"ruleId":"100","severity":1,"message":"114","line":2,"column":38,"nodeType":"102","messageId":"103","endLine":2,"endColumn":44},{"ruleId":"104","severity":1,"message":"105","line":4,"column":1,"nodeType":"106","endLine":16,"endColumn":2},{"ruleId":"100","severity":1,"message":"101","line":1,"column":17,"nodeType":"102","messageId":"103","endLine":1,"endColumn":26},{"ruleId":"100","severity":1,"message":"113","line":1,"column":28,"nodeType":"102","messageId":"103","endLine":1,"endColumn":36},{"ruleId":"100","severity":1,"message":"114","line":1,"column":38,"nodeType":"102","messageId":"103","endLine":1,"endColumn":44},{"ruleId":"104","severity":1,"message":"105","line":3,"column":1,"nodeType":"106","endLine":25,"endColumn":2},{"ruleId":"100","severity":1,"message":"101","line":1,"column":17,"nodeType":"102","messageId":"103","endLine":1,"endColumn":26},{"ruleId":"104","severity":1,"message":"105","line":21,"column":1,"nodeType":"106","endLine":29,"endColumn":2},{"ruleId":"107","severity":1,"message":"108","line":64,"column":67,"nodeType":"109","messageId":"110","endLine":64,"endColumn":69},{"ruleId":"96","replacedBy":"115"},{"ruleId":"98","replacedBy":"116"},{"ruleId":"107","severity":1,"message":"108","line":82,"column":57,"nodeType":"109","messageId":"110","endLine":82,"endColumn":59},{"ruleId":"117","severity":1,"message":"118","line":97,"column":59,"nodeType":"119","endLine":97,"endColumn":76},{"ruleId":"120","severity":1,"message":"121","line":108,"column":65,"nodeType":"122","messageId":"123","endLine":108,"endColumn":66,"suggestions":"124"},{"ruleId":"120","severity":1,"message":"125","line":108,"column":72,"nodeType":"122","messageId":"123","endLine":108,"endColumn":73,"suggestions":"126"},{"ruleId":"120","severity":1,"message":"127","line":108,"column":74,"nodeType":"122","messageId":"123","endLine":108,"endColumn":75,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":139,"column":82,"nodeType":"131","endLine":139,"endColumn":97},{"ruleId":"129","severity":1,"message":"130","line":147,"column":112,"nodeType":"131","endLine":147,"endColumn":127},{"ruleId":"129","severity":1,"message":"130","line":148,"column":65,"nodeType":"131","endLine":148,"endColumn":80},{"ruleId":"129","severity":1,"message":"130","line":149,"column":62,"nodeType":"131","endLine":149,"endColumn":77},{"ruleId":"132","severity":1,"message":"133","line":182,"column":8,"nodeType":"134","endLine":182,"endColumn":14,"suggestions":"135"},{"ruleId":"100","severity":1,"message":"101","line":1,"column":17,"nodeType":"102","messageId":"103","endLine":1,"endColumn":26},{"ruleId":"104","severity":1,"message":"105","line":5,"column":1,"nodeType":"106","endLine":31,"endColumn":2},{"ruleId":"136","severity":1,"message":"137","line":7,"column":32,"nodeType":"138","messageId":"139","endLine":7,"endColumn":38},{"ruleId":"100","severity":1,"message":"140","line":34,"column":18,"nodeType":"102","messageId":"103","endLine":34,"endColumn":25},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["141"],["142"],"'useState' is defined but never used.","'useRef' is defined but never used.",["141"],["142"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["143","144"],"Unnecessary escape character: \\^.",["145","146"],"Unnecessary escape character: \\*.",["147","148"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setTimeoutToClose'. Either include it or remove the dependency array.","ArrayExpression",["149"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'setShow' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"150","fix":"151","desc":"152"},{"messageId":"153","fix":"154","desc":"155"},{"messageId":"150","fix":"156","desc":"152"},{"messageId":"153","fix":"157","desc":"155"},{"messageId":"150","fix":"158","desc":"152"},{"messageId":"153","fix":"159","desc":"155"},{"desc":"160","fix":"161"},"removeEscape",{"range":"162","text":"163"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"164","text":"165"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"166","text":"163"},{"range":"167","text":"165"},{"range":"168","text":"163"},{"range":"169","text":"165"},"Update the dependencies array to be: [setTimeoutToClose, show]",{"range":"170","text":"171"},[3930,3931],"",[3930,3930],"\\",[3937,3938],[3937,3937],[3939,3940],[3939,3939],[6673,6679],"[setTimeoutToClose, show]"]