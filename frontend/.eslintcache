[{"/Users/davidcao/dev/RedditStocks/frontend/src/index.js":"1","/Users/davidcao/dev/RedditStocks/frontend/src/App.js":"2","/Users/davidcao/dev/RedditStocks/frontend/src/reportWebVitals.js":"3","/Users/davidcao/dev/RedditStocks/frontend/src/components/Nav.js":"4","/Users/davidcao/dev/RedditStocks/frontend/src/components/TIckers.js":"5","/Users/davidcao/dev/RedditStocks/frontend/src/components/Contact.js":"6","/Users/davidcao/dev/RedditStocks/frontend/src/components/About.js":"7","/Users/davidcao/dev/RedditStocks/frontend/src/components/EnterSecret.js":"8","/Users/davidcao/dev/RedditStocks/frontend/src/components/Tickers.js":"9","/Users/davidcao/dev/RedditStocks/frontend/src/components/Socket.js":"10","/Users/davidcao/dev/RedditStocks/frontend/src/components/TickerTable.js":"11"},{"size":500,"mtime":1630103987137,"results":"12","hashOfConfig":"13"},{"size":5696,"mtime":1634782013531,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1630103987138,"results":"15","hashOfConfig":"13"},{"size":706,"mtime":1634775817364,"results":"16","hashOfConfig":"13"},{"size":6307,"mtime":1630536344903,"results":"17","hashOfConfig":"13"},{"size":772,"mtime":1634775817363,"results":"18","hashOfConfig":"13"},{"size":372,"mtime":1634775817362,"results":"19","hashOfConfig":"13"},{"size":915,"mtime":1630208182400,"results":"20","hashOfConfig":"13"},{"size":6308,"mtime":1633992765394,"results":"21","hashOfConfig":"13"},{"size":8372,"mtime":1634792806514,"results":"22","hashOfConfig":"13"},{"size":3745,"mtime":1634782599516,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"gvwl0a",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"26"},"/Users/davidcao/dev/RedditStocks/frontend/src/index.js",[],["57","58"],"/Users/davidcao/dev/RedditStocks/frontend/src/App.js",["59"],"import './App.sass';\nimport React, { useState, useEffect, useRef } from \"react\"\n\nimport { BrowserRouter, Route, Switch  } from 'react-router-dom'\nimport Nav from './components/Nav'\nimport About from './components/About'\nimport Socket from './components/Socket'\nimport TickerTable from './components/TickerTable'\nimport Contact from './components/Contact'\nimport EnterSecret from './components/EnterSecret'\n\nimport io from \"socket.io-client\"\nimport axios from 'axios'\n\nconst ENDPOINT = process.env.REACT_APP_ENDPOINT\naxios.defaults.headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS'\n}\nconsole.log('env endpoint: ' + process.env.REACT_APP_ENDPOINT)\n\nfunction Home() {\n    const [threads, setThreads] = useState([])\n    const [currentTickers, _setCurrentTickers] = useState({})\n    const currentTickersRef = useRef(currentTickers)\n    const setCurrentTickers = tickers => { currentTickersRef.current = tickers; _setCurrentTickers(tickers)}\n    // using ref to work around access the state in socket handler\n    // see https://medium.com/geographit/accessing-react-state-in-event-listeners-with-usestate-and-useref-hooks-8cceee73c559\n\n    const [queryHour, setQueryHour] = useState(1)\n    function updateTickerList(hour) {\n        console.log(hour)\n        axios.get(ENDPOINT + 'stats?hours=' + hour).then(res => {\n            const ticker_obj = {}\n            res.data.forEach(ticker => {\n                ticker_obj[ticker['name']] = ticker \n            })\n            setCurrentTickers(ticker_obj)\n        })\n    }\n\n    // update ticker list every time the query hour changes\n    useEffect(() => {\n        updateTickerList(queryHour)\n    }, [queryHour])\n\n    useEffect(() => {\n        // set up websockets\n        const socket = io(ENDPOINT);\n        const handleNewThread = data => {\n            setThreads(threads => [data, ...threads])\n\n            // console.log('current tickers', currentTickersRef.current)\n\n            // update ticker mention count\n            // add 1 to the mention if ticker already in list\n            // if not, initiate it\n            if (data.tickers.length > 0) {\n                const updatedTickerList = { ...currentTickersRef.current }\n\n                data.tickers.forEach(ticker => {\n                    let currentInfo\n                    if (ticker in updatedTickerList) {\n                        currentInfo = updatedTickerList[ticker]\n                    } else {\n                        currentInfo = {\n                            'name': ticker,\n                            'mentions': 0,\n                            'sentiment': 0,\n                            'positive_count': 0,\n                            'negative_count': 0,\n                            'neutral_count': 0,\n                        }\n                    }\n\n                    \n                    // update ticker's mention count\n                    currentInfo['mentions'] += 1\n                    \n                    // update sentiment\n                    currentInfo['sentiment'] = (currentInfo['sentiment'] * (currentInfo['mentions'] - 1) + data.sentiment) / currentInfo['mentions'] \n\n                    // update sentiment %\n                    if (data.sentiment > 0) {\n                        currentInfo['positive_count'] += 1    \n                    } else if (data.sentiment < 0) {\n                        currentInfo['negative_count'] += 1    \n                    } else if (data.sentiment === 0) {\n                        currentInfo['neutral_count'] += 1    \n                    }\n                })\n                setCurrentTickers(updatedTickerList)\n            }\n        }\n        socket.on(\"new thread\", handleNewThread)\n\n        // get last thread on first render\n        axios.get(ENDPOINT + 'last_thread').then(res => setThreads([res.data]))\n\n        return () => {\n            // turning of socket listner on unmount\n            socket.off('new thread', handleNewThread);\n        }\n    }, []);\n\n    // map the object that contains all tickers to add the 'name' field\n    // then sort it based on count\n    // console.log(currentTickers)\n    const sortedTickers = currentTickers ?\n        Object.values(currentTickers).sort((a, b) => (b.mentions - a.mentions)) \n        : []\n\n    // limit tickers to 1000\n    // allow users to set this in the futures\n    if(sortedTickers.length > 500) sortedTickers.length = 500\n    if(threads.length > 500) setThreads(threads.slice(0, 500))\n    console.log(sortedTickers)\n\n    return (\n        <div className='main'>\n            <TickerTable tickers={sortedTickers} setQueryHour={setQueryHour} queryHour={queryHour}/>\n            <Socket threads={ threads }/>\n        </div>\n    )\n}\n\nfunction App() {\n    return (\n        <BrowserRouter>\n                <div className=\"App\">\n                <Nav />\n                <Switch>    \n                    <Route exact path='/' component={Home} />\n                    <Route path='/about' component={About} />\n                    <Route path='/contact' component={Contact} />\n                    <Route path='/code' component={EnterSecret} />\n                    {/* route reddit links to reddit */}\n                    <Route path='/r/:subreddit' component={() => { window.location.replace('https://reddit.com/' + window.location.pathname) }} />\n                    <Route path='/u/:user' component={() => { window.location.replace('https://reddit.com/' + window.location.pathname) }} />\n                   \n                    <Route path='*' component={()=>(<div>Oh no!!!! Page not found.</div>)} />\n                </Switch>\n                </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","/Users/davidcao/dev/RedditStocks/frontend/src/reportWebVitals.js",[],"/Users/davidcao/dev/RedditStocks/frontend/src/components/Nav.js",["60","61"],"import './Nav.sass'\nimport React, { useEffect } from 'react'\n\nimport { Link } from 'react-router-dom'\n\nexport default function () {\n   \n    return (\n        <nav className='nav'>\n            <h1 className='logo'>Popular Tickers</h1>\n            <ul className='nav-links'>\n                <Link to={'/'} target=\"_self\">\n                    <li className='nav-link'>Home</li>\n                </Link>\n                <Link to={'/about'} target=\"_self\">\n                    <li className='nav-link'>About</li>\n                </Link>\n                <Link to={'/contact'} target=\"_self\">\n                    <li className='nav-link'>Contact</li>\n                </Link>\n            </ul>\n        </nav>\n    )\n}","/Users/davidcao/dev/RedditStocks/frontend/src/components/TIckers.js",["62","63","64"],"import React, { useEffect, useState, useRef } from 'react'\nimport styles from \"./Tickers.module.sass\"\nimport './icons.css'\n\nimport axios from 'axios'\n\n// const serverURL = `https://redditstocks.herokuapp.com/`\nconst serverURL = 'http://127.0.0.1:5000/'\n\nconst subreddits = [\n    'wallstreetbets',\n    'stocks',\n    'pennystocks',\n    'spacs',\n    'investing',\n    'options',\n    'robinhood',\n]\n\n\nexport default function () {\n    return (\n        <div>\n            {\n                subreddits.map(sub => <TicksFromSub subreddit={sub}/>)\n            }\n        </div>\n    )\n}\n\nfunction TicksFromSub({ subreddit }) {\n    const [data, updateData] = useState()\n    const alreadySynced = useRef(false)\n\n    axios.get(serverURL + subreddit, {\n        headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS',\n        }})\n    .then(res => {\n        if (!alreadySynced.current) {\n            updateData(res.data)\n            alreadySynced.current = true   \n        }\n    })\n\n    let tickerRows = []\n    if (data) {\n        console.log(data['tickers'])\n        let keys = Object.keys(data.tickers)\n        // limit to 20 tickers\n        keys = keys.slice(0, 20)\n        // sort the tickers by mention count\n        keys.sort((a, b) => data.tickers[b].count - data.tickers[a].count )\n        \n        for (const key of keys) {\n            tickerRows.push(\n                <TickerRow {...data.tickers[key]} ticker={key} key={key}/>\n            )\n        }\n    }\n\n    const loaded = data ? true : false\n    const dataIsEmpty = !data || Object.keys(data.tickers).length == 0    \n\n    const noTickers = (\n        <div>Didn't find enough stocks being discussed.</div>\n    )\n    const tickerTable = (\n        <table className={styles.table}>\n            <thead>\n            <tr>\n                <th className={styles.left}>Ticker</th>\n                <th>Mentions</th>\n                <th>Positive Strength</th>\n                <th>Negative Strength</th>\n                <th>% positive</th>\n                <th>% Neutral</th>\n                <th>% Negative</th>\n            </tr>\n            </thead>\n            <tbody>{tickerRows}</tbody>\n        </table>\n    )\n    // last updated time\n    let newTime\n    let LUTTime\n    if (data) {\n        const date_from_data = data['last_updated'].slice(0, 10).split('-')\n        const time_from_data = data['last_updated'].slice(-8).split(':')\n        newTime = new Date(Date.UTC(...date_from_data, ...time_from_data))\n\n        const LUTDate = `${newTime.getUTCFullYear()}-${newTime.getUTCMonth()}-${newTime.getUTCDate()}`\n        const LUTHour = newTime.getHours() > 12 ? newTime.getHours()-12 : newTime.getHours()\n        const LUTMinute = newTime.getMinutes() > 10 ? newTime.getMinutes() : '0' + newTime.getMinutes()\n        LUTTime = LUTHour + ':' + LUTMinute\n        LUTTime = newTime.getHours() > 12 ? LUTTime+'PM' : LUTTime+'AM'\n        LUTTime = LUTDate+' '+LUTTime\n    }\n    const main_section = (\n        <>\n        <div className={styles.title}>\n            <h1 className={styles.sub}>r/{subreddit}</h1>\n            <div className={styles.lastUpdated}>\n                <p>Last updated:</p>\n                <p>{LUTTime}</p>\n            </div>\n        </div>\n        { dataIsEmpty ? noTickers : tickerTable } \n        </>\n    )\n    const loader = (\n        <>\n        <div class={styles.left}>{'Scraping data from r/' + subreddit + '... it can take a minute'}</div>\n        <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n        </>\n    )\n\n        \n    return (\n        <div className={styles.ctn}>\n            { loaded ? main_section : loader }\n        </div>\n    )\n}\n\nfunction ToolTip({ children, tooltext, className, childClassNames, onClick }) {\n    const [pos, setPos] = useState()\n    const [showChild, setShow] = useState(false)\n    function updatePos(e) {\n        setShow(true)\n        setPos({\n            left: e.clientX + 15,\n            top: e.clientY + 10,\n        })    \n    }\n    return (\n        <div\n            className={`${className} ${styles.tooltip}`}\n            onMouseMove={updatePos}\n            onMouseLeave={() => setShow(false)}\n            onClick={onClick}\n        >\n            {children}\n            {showChild && (\n                <div\n                    className={`${childClassNames} ${styles.tooltext}`}\n                    style={pos ? pos : null}\n                >\n                    {tooltext}\n                </div>\n            )} \n        </div>\n    )\n}\n\nfunction TickerRow({ ticker, count, pos_sent, pos_sent_cnt=0, neg_sent, neg_sent_cnt=0, neut_sent_cnt=0}) {\n    const [show, setShow] = useState(true)\n    let total_sent_cnt = pos_sent_cnt + neg_sent_cnt + neut_sent_cnt\n    const pos_strength = pos_sent && (pos_sent*100).toFixed(0)\n    const neg_strength = neg_sent && (neg_sent*100).toFixed(0)\n\n    const sent_percent = sent_cnt => sent_cnt > 0 ? (sent_cnt / total_sent_cnt * 100).toFixed(2) + '%' : null\n\n    const blacklistSecret = localStorage.getItem(\"blacklistSecret\")\n    \n    function blacklistTicker() {\n        axios.post(serverURL + \"blacklist_ticker\", {\n            ticker,\n            secret: blacklistSecret\n        })\n        setShow(false)\n    }\n\n    function googleTicker() {\n        window.open(\"https://www.google.com/search?q=\" + ticker,'_blank')\n    }\n    if(!show) return null\n    return (\n        <tr>\n            <td className={`${styles.left}`} onClick={googleTicker}>\n                {\n                    blacklistSecret ?\n                        <ToolTip tooltext={'Open chart'} >\n                            {ticker}\n                        </ToolTip>\n                        : ticker\n                }\n            </td>\n            <td>{count}</td>\n            <td>{pos_strength || 0}</td>\n            <td>{neg_strength || 0}</td>\n            <td>{sent_percent(pos_sent_cnt) || \"0%\"}</td>\n            <td>{sent_percent(neut_sent_cnt) || \"0%\"}</td>\n            <td>{sent_percent(neg_sent_cnt) || \"0%\"}</td>\n            {\n                    blacklistSecret &&\n                        <ToolTip tooltext={'Blacklist this ticker'} className={styles.remove} onClick={blacklistTicker}>\n                            X\n                        </ToolTip>\n            }\n        </tr>\n    )\n}\n",["65","66"],"/Users/davidcao/dev/RedditStocks/frontend/src/components/Contact.js",["67","68","69","70"],"import './Contact.sass'\nimport React, { useEffect, useState, useRef } from 'react'\n\nexport default function () {\n    \n    return (\n        <div className='contact'>            \n            <h1>\n                Contact\n            </h1>\n            <div>\n                    Suggestions? Comments?\n            </div>\n            <br/>\n            <div className='contact-comment'>\n                <textarea className='contact-text-area' name=\"\" id=\"\" cols=\"30\" rows=\"10\" value=\"Not yet implemented.\" readOnly></textarea>\n                <br/>\n                <div className='submit'>\n                    Submit\n                </div>\n            </div>\n            <br/>\n            <br />\n            <a href=\"/\" target=\"_self\">👈 Back to home</a>\n        </div>\n    )\n}","/Users/davidcao/dev/RedditStocks/frontend/src/components/About.js",["71","72","73","74"],"import './About.sass'\nimport React, { useEffect, useState, useRef } from 'react'\n\nexport default function () {\n    \n    return (\n        <div className='about'>            \n            <h1>\n                Find out what stocks Reddit is talking about!\n            </h1>\n\n            <br/>\n            <a href=\"/\" target=\"_self\">👈 Back to home</a>\n        </div>\n    )\n}","/Users/davidcao/dev/RedditStocks/frontend/src/components/EnterSecret.js",["75","76","77","78"],"import React, { useEffect, useState, useRef } from 'react'\n\nexport default function () {\n    function storeSecret() {\n        const secret = document.querySelector('#textArea').value\n        localStorage.setItem(\"blacklistSecret\", secret)\n        document.querySelector(\"#currentSecret\").textContent = localStorage.getItem(\"blacklistSecret\")\n    }\n    \n    return (\n        <div className='about'>            \n            <div className='contact-comment'>\n                <p id=\"currentSecret\">{localStorage.getItem(\"blacklistSecret\") || \"\"}</p>\n                <textarea className='contact-text-area' name=\"\" id=\"textArea\" cols=\"30\" rows=\"10\"></textarea>\n                <br/>\n                <div className='submit' onClick={storeSecret}>\n                    Submit\n                </div>\n            </div>\n            <br/>\n            <br />\n            <a href=\"/\">👈 Back to home</a>\n        </div>\n    )\n}","/Users/davidcao/dev/RedditStocks/frontend/src/components/Tickers.js",["79","80","81"],"import React, { useEffect, useState, useRef } from 'react'\nimport styles from \"./Tickers.module.sass\"\nimport './icons.css'\n\nimport axios from 'axios'\n\n// const serverURL = `https://redditstocks.herokuapp.com/`\nconst serverURL = 'http://127.0.0.1:5000/'\n\nconst subreddits = [\n    'wallstreetbets',\n    'stocks',\n    'pennystocks',\n    'spacs',\n    'investing',\n    'options',\n    'robinhood',\n]\n\n\nexport default function () {\n    return (\n        <div>\n            {\n                subreddits.map(sub => <TicksFromSub subreddit={sub}/>)\n            }\n        </div>\n    )\n}\n\nfunction TicksFromSub({ subreddit }) {\n    const [data, updateData] = useState()\n    const alreadySynced = useRef(false)\n\n    axios.get(serverURL + subreddit, {\n        headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS',\n        }})\n    .then(res => {\n        if (!alreadySynced.current) {\n            updateData(res.data)\n            alreadySynced.current = true   \n        }\n    })\n\n    let tickerRows = []\n    if (data) {\n        console.log(data['tickers'])\n        let keys = Object.keys(data.tickers)\n        // limit to 20 tickers\n        keys = keys.slice(0, 20)\n        // sort the tickers by mention count\n        keys.sort((a, b) => data.tickers[b].count - data.tickers[a].count )\n        \n        for (const key of keys) {\n            tickerRows.push(\n                <TickerRow {...data.tickers[key]} ticker={key} key={key}/>\n            )\n        }\n    }\n\n    const loaded = data ? true : false\n    const dataIsEmpty = !data || Object.keys(data.tickers).length == 0    \n\n    const noTickers = (\n        <div>Didn't find enough stocks being discussed.</div>\n    )\n\n    const tickerTable = (\n        <table className={styles.table}>\n            <thead>\n            <tr>\n                <th className={styles.left}>Ticker</th>\n                <th>Mentions</th>\n                <th>Positive Strength</th>\n                <th>Negative Strength</th>\n                <th>% positive</th>\n                <th>% Neutral</th>\n                <th>% Negative</th>\n            </tr>\n            </thead>\n            <tbody>{tickerRows}</tbody>\n        </table>\n    )\n    // last updated time\n    let newTime\n    let LUTTime\n    if (data) {\n        const date_from_data = data['last_updated'].slice(0, 10).split('-')\n        const time_from_data = data['last_updated'].slice(-8).split(':')\n        newTime = new Date(Date.UTC(...date_from_data, ...time_from_data))\n\n        const LUTDate = `${newTime.getUTCFullYear()}-${newTime.getUTCMonth()}-${newTime.getUTCDate()}`\n        const LUTHour = newTime.getHours() > 12 ? newTime.getHours()-12 : newTime.getHours()\n        const LUTMinute = newTime.getMinutes() > 10 ? newTime.getMinutes() : '0' + newTime.getMinutes()\n        LUTTime = LUTHour + ':' + LUTMinute\n        LUTTime = newTime.getHours() > 12 ? LUTTime+'PM' : LUTTime+'AM'\n        LUTTime = LUTDate+' '+LUTTime\n    }\n    const main_section = (\n        <>\n        <div className={styles.title}>\n            <h1 className={styles.sub}>r/{subreddit}</h1>\n            <div className={styles.lastUpdated}>\n                <p>Last updated:</p>\n                <p>{LUTTime}</p>\n            </div>\n        </div>\n        { dataIsEmpty ? noTickers : tickerTable } \n        </>\n    )\n    const loader = (\n        <>\n        <div class={styles.left}>{'Scraping data from r/' + subreddit + '... it can take a minute'}</div>\n        <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n        </>\n    )\n\n        \n    return (\n        <div className={styles.ctn}>\n            { loaded ? main_section : loader }\n        </div>\n    )\n}\n\nfunction ToolTip({ children, tooltext, className, childClassNames, onClick }) {\n    const [pos, setPos] = useState()\n    const [showChild, setShow] = useState(false)\n    function updatePos(e) {\n        setShow(true)\n        setPos({\n            left: e.clientX + 15,\n            top: e.clientY + 10,\n        })    \n    }\n    return (\n        <div\n            className={`${className} ${styles.tooltip}`}\n            onMouseMove={updatePos}\n            onMouseLeave={() => setShow(false)}\n            onClick={onClick}\n        >\n            {children}\n            {showChild && (\n                <div\n                    className={`${childClassNames} ${styles.tooltext}`}\n                    style={pos ? pos : null}\n                >\n                    {tooltext}\n                </div>\n            )} \n        </div>\n    )\n}\n\nfunction TickerRow({ ticker, count, pos_sent, pos_sent_cnt=0, neg_sent, neg_sent_cnt=0, neut_sent_cnt=0}) {\n    const [show, setShow] = useState(true)\n    let total_sent_cnt = pos_sent_cnt + neg_sent_cnt + neut_sent_cnt\n    const pos_strength = pos_sent && (pos_sent*100).toFixed(0)\n    const neg_strength = neg_sent && (neg_sent*100).toFixed(0)\n\n    const sent_percent = sent_cnt => sent_cnt > 0 ? (sent_cnt / total_sent_cnt * 100).toFixed(2) + '%' : null\n\n    const blacklistSecret = localStorage.getItem(\"blacklistSecret\")\n    \n    function blacklistTicker() {\n        axios.post(serverURL + \"blacklist_ticker\", {\n            ticker,\n            secret: blacklistSecret\n        })\n        setShow(false)\n    }\n\n    function googleTicker() {\n        window.open(\"https://www.google.com/search?q=\" + ticker,'_blank')\n    }\n    if(!show) return null\n    return (\n        <tr>\n            <td className={`${styles.left}`} onClick={googleTicker}>\n                {\n                    blacklistSecret ?\n                        <ToolTip tooltext={'Open chart'} >\n                            {ticker}\n                        </ToolTip>\n                        : ticker\n                }\n            </td>\n            <td>{count}</td>\n            <td>{pos_strength || 0}</td>\n            <td>{neg_strength || 0}</td>\n            <td>{sent_percent(pos_sent_cnt) || \"0%\"}</td>\n            <td>{sent_percent(neut_sent_cnt) || \"0%\"}</td>\n            <td>{sent_percent(neg_sent_cnt) || \"0%\"}</td>\n            {\n                    blacklistSecret &&\n                        <ToolTip tooltext={'Blacklist this ticker'} className={styles.remove} onClick={blacklistTicker}>\n                            X\n                        </ToolTip>\n            }\n        </tr>\n    )\n}\n",["82","83"],"/Users/davidcao/dev/RedditStocks/frontend/src/components/Socket.js",["84","85","86","87","88","89","90","91","92","93","94","95"],"/Users/davidcao/dev/RedditStocks/frontend/src/components/TickerTable.js",["96","97","98"],"import React, { useEffect, useState } from 'react'\nimport \"./TickerTable.sass\"\n\n// tickers: sorted by mentions in App.js\nexport default function ({ tickers, queryHour, setQueryHour }) {\n    // console.log('ticker table: ', tickers)\n    const tickerRows = []\n    tickers?.forEach(ticker => {\n        // if (ticker.mentions > 2) {\n            tickerRows.push(<TickerRow key={ticker['name']} {...ticker} />)\n        // }\n    })\n    if(tickerRows.length > 300) tickerRows.length = 300\n\n    // console.log('ticker rows: ', tickerRows)\n\n    return (\n        <div className=\"stats\">\n            <h1>Stats</h1>\n            <ul className='hour-selectors'>\n                <li className={`hour-selector nav-link ${queryHour === 1 ? 'hour-selected' : ''}`} onClick={()=>setQueryHour(1)}>1H</li>\n                <li className={`hour-selector nav-link ${queryHour === 4 ? 'hour-selected' : ''}`} onClick={()=>setQueryHour(4)}>4H</li>\n                <li className={`hour-selector nav-link ${queryHour === 12 ? 'hour-selected' : ''}`} onClick={()=>setQueryHour(12)}>12H</li>\n                <li className={`hour-selector nav-link ${queryHour === 24 ? 'hour-selected' : ''}`} onClick={()=>setQueryHour(24)}>1D</li>\n                <li className={`hour-selector nav-link ${queryHour === 72 ? 'hour-selected' : ''}`} onClick={()=>setQueryHour(72)}>3D</li>\n                <li className={`hour-selector nav-link ${queryHour === 168 ? 'hour-selected' : ''}`} onClick={()=>setQueryHour(168)}>1W</li>\n            </ul>\n            <table className='table'>\n                <thead>\n                    <tr>\n                        <th className='tickerName'>Ticker</th>\n                        <th>Mentions</th>\n                        <th>Strength</th>\n                        <th>Positive</th>\n                        <th>Neutral</th>\n                        <th>Negative</th>\n                    </tr>\n                </thead>\n                { tickerRows.length === 0 ? (\n                    <tbody>\n                        <tr>\n                            <td colSpan=\"6\">\n                                <br />\n                                Not data in this time frame yet.\n                            </td>\n                        </tr>\n                    </tbody>\n                ) : (\n                    <tbody>\n                        { tickerRows }\n                    </tbody>\n                )}\n            </table>\n        </div>\n    )    \n}\n\nfunction TickerRow({ name, mentions, sentiment, positive_count, neutral_count, negative_count }) {\n\n    // const sent_percent = sent_cnt => sent_cnt > 0 ? (sent_cnt / total_sent_cnt * 100).toFixed(2) + '%' : null\n\n    // const blacklistSecret = localStorage.getItem(\"blacklistSecret\")\n    \n    // function blacklistTicker() {\n    //     axios.post(serverURL + \"blacklist_ticker\", {\n    //         ticker,\n    //         secret: blacklistSecret\n    //     })\n    //     setShow(false)\n    // }\n\n    function googleTicker() {\n        window.open(\"https://www.google.com/search?q=\" + name,'_blank')\n    }\n\n    return (\n        <tr>\n            <td className='tickerName' onClick={googleTicker}>\n                { name }\n            </td>\n            <td>{mentions}</td>\n            <td>{(sentiment*100).toFixed(2)}</td>\n            <td>{Math.round((positive_count / mentions)*100)}%</td>\n            <td>{Math.round((neutral_count / mentions)*100)}%</td>\n            <td>{Math.round((negative_count / mentions)*100)}%</td>\n            {\n                    // blacklistSecret &&\n                    //     <ToolTip tooltext={'Blacklist this ticker'} className={styles.remove} onClick={blacklistTicker}>\n                    //         X\n                    //     </ToolTip>\n            }\n        </tr>\n    )\n}",{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":45,"column":8,"nodeType":"105","endLine":45,"endColumn":19,"suggestions":"106"},{"ruleId":"107","severity":1,"message":"108","line":2,"column":17,"nodeType":"109","messageId":"110","endLine":2,"endColumn":26},{"ruleId":"111","severity":1,"message":"112","line":6,"column":1,"nodeType":"113","endLine":24,"endColumn":2},{"ruleId":"107","severity":1,"message":"108","line":1,"column":17,"nodeType":"109","messageId":"110","endLine":1,"endColumn":26},{"ruleId":"111","severity":1,"message":"112","line":21,"column":1,"nodeType":"113","endLine":29,"endColumn":2},{"ruleId":"114","severity":1,"message":"115","line":64,"column":67,"nodeType":"116","messageId":"117","endLine":64,"endColumn":69},{"ruleId":"99","replacedBy":"118"},{"ruleId":"101","replacedBy":"119"},{"ruleId":"107","severity":1,"message":"108","line":2,"column":17,"nodeType":"109","messageId":"110","endLine":2,"endColumn":26},{"ruleId":"107","severity":1,"message":"120","line":2,"column":28,"nodeType":"109","messageId":"110","endLine":2,"endColumn":36},{"ruleId":"107","severity":1,"message":"121","line":2,"column":38,"nodeType":"109","messageId":"110","endLine":2,"endColumn":44},{"ruleId":"111","severity":1,"message":"112","line":4,"column":1,"nodeType":"113","endLine":27,"endColumn":2},{"ruleId":"107","severity":1,"message":"108","line":2,"column":17,"nodeType":"109","messageId":"110","endLine":2,"endColumn":26},{"ruleId":"107","severity":1,"message":"120","line":2,"column":28,"nodeType":"109","messageId":"110","endLine":2,"endColumn":36},{"ruleId":"107","severity":1,"message":"121","line":2,"column":38,"nodeType":"109","messageId":"110","endLine":2,"endColumn":44},{"ruleId":"111","severity":1,"message":"112","line":4,"column":1,"nodeType":"113","endLine":16,"endColumn":2},{"ruleId":"107","severity":1,"message":"108","line":1,"column":17,"nodeType":"109","messageId":"110","endLine":1,"endColumn":26},{"ruleId":"107","severity":1,"message":"120","line":1,"column":28,"nodeType":"109","messageId":"110","endLine":1,"endColumn":36},{"ruleId":"107","severity":1,"message":"121","line":1,"column":38,"nodeType":"109","messageId":"110","endLine":1,"endColumn":44},{"ruleId":"111","severity":1,"message":"112","line":3,"column":1,"nodeType":"113","endLine":25,"endColumn":2},{"ruleId":"107","severity":1,"message":"108","line":1,"column":17,"nodeType":"109","messageId":"110","endLine":1,"endColumn":26},{"ruleId":"111","severity":1,"message":"112","line":21,"column":1,"nodeType":"113","endLine":29,"endColumn":2},{"ruleId":"114","severity":1,"message":"115","line":64,"column":67,"nodeType":"116","messageId":"117","endLine":64,"endColumn":69},{"ruleId":"99","replacedBy":"122"},{"ruleId":"101","replacedBy":"123"},{"ruleId":"107","severity":1,"message":"124","line":27,"column":7,"nodeType":"109","messageId":"110","endLine":27,"endColumn":20},{"ruleId":"114","severity":1,"message":"115","line":90,"column":57,"nodeType":"116","messageId":"117","endLine":90,"endColumn":59},{"ruleId":"125","severity":1,"message":"126","line":109,"column":61,"nodeType":"127","messageId":"128","endLine":109,"endColumn":62,"suggestions":"129"},{"ruleId":"125","severity":1,"message":"130","line":109,"column":68,"nodeType":"127","messageId":"128","endLine":109,"endColumn":69,"suggestions":"131"},{"ruleId":"125","severity":1,"message":"132","line":109,"column":70,"nodeType":"127","messageId":"128","endLine":109,"endColumn":71,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":131,"column":59,"nodeType":"136","endLine":131,"endColumn":76},{"ruleId":"137","severity":1,"message":"138","line":148,"column":59,"nodeType":"139","endLine":148,"endColumn":74},{"ruleId":"137","severity":1,"message":"138","line":158,"column":116,"nodeType":"139","endLine":158,"endColumn":131},{"ruleId":"137","severity":1,"message":"138","line":159,"column":112,"nodeType":"139","endLine":159,"endColumn":127},{"ruleId":"137","severity":1,"message":"138","line":160,"column":65,"nodeType":"139","endLine":160,"endColumn":80},{"ruleId":"137","severity":1,"message":"138","line":161,"column":62,"nodeType":"139","endLine":161,"endColumn":77},{"ruleId":"103","severity":1,"message":"140","line":196,"column":8,"nodeType":"105","endLine":196,"endColumn":14,"suggestions":"141"},{"ruleId":"107","severity":1,"message":"108","line":1,"column":17,"nodeType":"109","messageId":"110","endLine":1,"endColumn":26},{"ruleId":"107","severity":1,"message":"120","line":1,"column":28,"nodeType":"109","messageId":"110","endLine":1,"endColumn":36},{"ruleId":"111","severity":1,"message":"112","line":5,"column":1,"nodeType":"113","endLine":56,"endColumn":2},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateTickerList'. Either include it or remove the dependency array.","ArrayExpression",["144"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["142"],["143"],"'useState' is defined but never used.","'useRef' is defined but never used.",["142"],["143"],"'badWordsRegex' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["145","146"],"Unnecessary escape character: \\^.",["147","148"],"Unnecessary escape character: \\*.",["149","150"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","React Hook useEffect has a missing dependency: 'setTimeoutToClose'. Either include it or remove the dependency array.",["151"],"no-global-assign","no-unsafe-negation",{"desc":"152","fix":"153"},{"messageId":"154","fix":"155","desc":"156"},{"messageId":"157","fix":"158","desc":"159"},{"messageId":"154","fix":"160","desc":"156"},{"messageId":"157","fix":"161","desc":"159"},{"messageId":"154","fix":"162","desc":"156"},{"messageId":"157","fix":"163","desc":"159"},{"desc":"164","fix":"165"},"Update the dependencies array to be: [queryHour, updateTickerList]",{"range":"166","text":"167"},"removeEscape",{"range":"168","text":"169"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"170","text":"171"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"172","text":"169"},{"range":"173","text":"171"},{"range":"174","text":"169"},{"range":"175","text":"171"},"Update the dependencies array to be: [setTimeoutToClose, show]",{"range":"176","text":"177"},[1712,1723],"[queryHour, updateTickerList]",[3852,3853],"",[3852,3852],"\\",[3859,3860],[3859,3859],[3861,3862],[3861,3861],[7126,7132],"[setTimeoutToClose, show]"]