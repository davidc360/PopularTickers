[{"/Users/davidcao/dev/RedditStocks/frontend/src/index.js":"1","/Users/davidcao/dev/RedditStocks/frontend/src/App.js":"2","/Users/davidcao/dev/RedditStocks/frontend/src/reportWebVitals.js":"3","/Users/davidcao/dev/RedditStocks/frontend/src/components/Nav.js":"4","/Users/davidcao/dev/RedditStocks/frontend/src/components/Contact.js":"5","/Users/davidcao/dev/RedditStocks/frontend/src/components/About.js":"6","/Users/davidcao/dev/RedditStocks/frontend/src/components/EnterSecret.js":"7","/Users/davidcao/dev/RedditStocks/frontend/src/components/Socket.js":"8","/Users/davidcao/dev/RedditStocks/frontend/src/components/TickerTable.js":"9"},{"size":500,"mtime":1630103987137,"results":"10","hashOfConfig":"11"},{"size":6822,"mtime":1635286185731,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1630103987138,"results":"13","hashOfConfig":"11"},{"size":706,"mtime":1634775817364,"results":"14","hashOfConfig":"11"},{"size":2224,"mtime":1634977237619,"results":"15","hashOfConfig":"11"},{"size":372,"mtime":1634775817362,"results":"16","hashOfConfig":"11"},{"size":915,"mtime":1630208182400,"results":"17","hashOfConfig":"11"},{"size":9005,"mtime":1635037131532,"results":"18","hashOfConfig":"11"},{"size":3955,"mtime":1634966340648,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"gvwl0a",{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"22"},"/Users/davidcao/dev/RedditStocks/frontend/src/index.js",[],["45","46"],"/Users/davidcao/dev/RedditStocks/frontend/src/App.js",["47","48"],"/Users/davidcao/dev/RedditStocks/frontend/src/reportWebVitals.js",[],"/Users/davidcao/dev/RedditStocks/frontend/src/components/Nav.js",["49","50"],"import './Nav.sass'\nimport React, { useEffect } from 'react'\n\nimport { Link } from 'react-router-dom'\n\nexport default function () {\n   \n    return (\n        <nav className='nav'>\n            <h1 className='logo'>Popular Tickers</h1>\n            <ul className='nav-links'>\n                <Link to={'/'} target=\"_self\">\n                    <li className='nav-link'>Home</li>\n                </Link>\n                <Link to={'/about'} target=\"_self\">\n                    <li className='nav-link'>About</li>\n                </Link>\n                <Link to={'/contact'} target=\"_self\">\n                    <li className='nav-link'>Contact</li>\n                </Link>\n            </ul>\n        </nav>\n    )\n}","/Users/davidcao/dev/RedditStocks/frontend/src/components/Contact.js",["51","52","53"],"import './Contact.sass'\nimport React, { useEffect, useState, useRef } from 'react'\nimport emailjs, { init } from 'emailjs-com'\ninit('user_REUMllQclwmLqErmaHbkL')\n\nexport default function () {\n    const [sent, setSent] = useState(false)\n    const [success, setSuccess] = useState(null)\n\n    function sendEmail() {\n        setSent(true)\n        emailjs.sendForm('service_3dajah7','template_nz2szng', '#contact-form')\n            .then(function(response) {\n                setSuccess(true)\n                console.log('SUCCESS!', response.status, response.text);\n            }, function(err) {\n                setSuccess(false)\n                console.log('FAILED...', err);\n            })\n    }\n\n    const form = (\n        <form id=\"contact-form\">\n            <div>\n                <label>Name: </label>\n                <input type=\"text\" name=\"user_name\" />\n            </div>\n            <div>\n                <label>Email: </label>\n                <input type=\"email\" name=\"user_email\" />\n            </div>\n            <div className='contact-comment'>\n                <textarea className='contact-text-area' name=\"message\" id=\"\" cols=\"30\" rows=\"10\"></textarea>\n                <br/>\n                <div className='submit' onClick={sendEmail}>\n                    Submit\n                </div>\n            </div>\n        </form>\n    )\n    \n    return (\n        <div className='contact'>            \n            <h1>\n                Contact\n            </h1>\n            <div>\n                    Suggestions? Comments? Leave a message below!\n            </div>\n            <br/>\n            {sent ? \n                success === true ? (\n                    <div className=\"responseMsg\"><br/><br/>Message sent, thank you! ðŸ˜Š</div>\n                ) : (\n                        success === false ? (\n                            <div className=\"responseMsg\"><br/><br/>Message failed to send, please try again!</div>\n                        ) : (\n                            <div className=\"responseMsg\"><br/><br/>Sending message...</div>\n                        )\n                )\n            : form}\n            <br/>\n            <br />\n            <a href=\"/\" target=\"_self\">ðŸ‘ˆ Back to home</a>\n        </div>\n    )\n}","/Users/davidcao/dev/RedditStocks/frontend/src/components/About.js",["54","55","56","57"],"import './About.sass'\nimport React, { useEffect, useState, useRef } from 'react'\n\nexport default function () {\n    \n    return (\n        <div className='about'>            \n            <h1>\n                Find out what stocks Reddit is talking about!\n            </h1>\n\n            <br/>\n            <a href=\"/\" target=\"_self\">ðŸ‘ˆ Back to home</a>\n        </div>\n    )\n}","/Users/davidcao/dev/RedditStocks/frontend/src/components/EnterSecret.js",["58","59","60","61"],"import React, { useEffect, useState, useRef } from 'react'\n\nexport default function () {\n    function storeSecret() {\n        const secret = document.querySelector('#textArea').value\n        localStorage.setItem(\"blacklistSecret\", secret)\n        document.querySelector(\"#currentSecret\").textContent = localStorage.getItem(\"blacklistSecret\")\n    }\n    \n    return (\n        <div className='about'>            \n            <div className='contact-comment'>\n                <p id=\"currentSecret\">{localStorage.getItem(\"blacklistSecret\") || \"\"}</p>\n                <textarea className='contact-text-area' name=\"\" id=\"textArea\" cols=\"30\" rows=\"10\"></textarea>\n                <br/>\n                <div className='submit' onClick={storeSecret}>\n                    Submit\n                </div>\n            </div>\n            <br/>\n            <br />\n            <a href=\"/\">ðŸ‘ˆ Back to home</a>\n        </div>\n    )\n}","/Users/davidcao/dev/RedditStocks/frontend/src/components/Socket.js",["62","63","64","65","66","67","68","69","70","71","72","73"],"import './Socket.sass'\nimport React, { useState, useEffect, useRef } from \"react\"\nimport SanitizedHTML from 'react-sanitized-html';\n\nimport { FaCog, FaExternalLinkAlt } from 'react-icons/fa'\n\nconst badWords = new Set([\n    'fuck',\n    'fucking',\n    'bitch',\n    'shit',\n    'ass',\n    'cunt',\n    'retard',\n    'rtard',\n    'jerk',\n    'fuk',\n    'fuckin',\n    'fukin',\n    'kink',\n    'ass',\n    'pussy',\n    'cuck'\n])\n\nconst badWordsRegexPattern = `(${[...badWords].join('|')})`\nconst badWordsRegex = new RegExp(badWordsRegexPattern, \"gi\")\n\nfunction SocketWrapper({ threads }) {\n    const [isHovering, setIsHovering] = useState(false)\n    const [paused, setPaused] = useState(false)\n    const [showSettings, setShowSettings] = useState(false)\n    const [blockOffensive, setBlockOffensive] = useState(true)\n    const [onlyShowIfTicker, setOnlyShowIfTicker] = useState(false)\n\n    function toggleShowSettings() {\n        setShowSettings(show => !show)\n    }\n\n    useEffect(() => {\n        console.log(threads)\n    }, [threads])\n\n    return (\n        <div className='threadsCtn'>\n            <h1 className='center title threadsHeading'>\n                <div className='titleWrapper'>\n                    {paused ? '(Updates paused)' \n                        : isHovering ? '(Paused on Mouse Hover)'\n                        : 'Latest'}\n                </div>\n                <div className='cogWrapper'> <FaCog className=\"settingsToggle\" onClick={toggleShowSettings} /> </div>\n            </h1>\n            <SettingsPane show={showSettings} setShow={setShowSettings}\n                blockOffensive={blockOffensive} setBlockOffensive={setBlockOffensive}\n                onlyShowIfTicker={onlyShowIfTicker} setOnlyShowIfTicker={setOnlyShowIfTicker}\n            />\n            <div className='pauseButton' onClick={()=>setPaused(val => !val)}>\n                <input\n                    checked={isHovering || paused}\n                    type=\"checkbox\"\n                />\n                Pause\n            </div>\n            <Socket threads={threads} isHovering={isHovering} paused={paused}\n                setHover={setIsHovering} blockOffensive={blockOffensive}\n                onlyShowIfTicker={onlyShowIfTicker}\n            />\n        </div>\n    )\n}\n\n// abstract away the socket component and only update it when mouse is not hovering\nconst Socket = React.memo(function Socket({ threads, isHovering, setHover, paused, blockOffensive, onlyShowIfTicker }) {\n    // Turn thread informations into thread elements\n    const postElements = threads?.map(thread => (\n        <RedditPost {...thread}\n            key={thread.body + thread.link} blockOffensive={blockOffensive}\n            onlyShowIfTicker={onlyShowIfTicker}\n        />\n    ))\n\n    return (\n        <div className='threads' onMouseOver={!isTouchScreenDevice() ? ()=>setHover(true) : null} onMouseLeave={!isTouchScreenDevice() ? ()=>setHover(false) : null}>\n            {postElements}\n            <RedditPost\n                body='<p>Welcome to popular tickers!</p>'\n                subreddit='all'\n                author='david'\n                type='comment'\n                blockOffensive={blockOffensive}\n                onlyShowIfTicker={onlyShowIfTicker}\n            />\n        </div>\n    );\n}, (prevPros, nextProps) => (nextProps.isHovering || nextProps.paused))\n\nfunction RedditPost({ title, body, author, subreddit, link, tickers, type, blockOffensive, onlyShowIfTicker }) {\n    // if only show threads containing tickers and there aren't any tickers, return null\n    if (onlyShowIfTicker && (!tickers || tickers.length == 0)) {\n        return null\n    }\n\n    const threadType = title ? 'post' : 'comment'\n    // convert tickers to a set\n    const tickersSet = new Set(tickers)\n\n    // bold and link to chart for tickers found in the content\n    // first split the words\n    // first strip word from punctuation, and transform to uppercase\n    // then check if word is a bad word and if we need to filter it\n    // then check if the ticker list contains the word\n    function addLinkAndFilter(text) {\n        // split into words by the following chars:\n        // the split keeps the deliminator \n        return text.split(/([?<> .,-])/gi)\n                .map(word => {\n                    // remove punctuation\n                    let word_transformed = word.replace(/[.,\\/#!?$%\\^\\*;:{}=\\-_`~()]/g, \"\")\n\n                    // if filter bad words,turn bad words into asterisks\n                    if (blockOffensive && badWords.has(word_transformed.toLowerCase())) {\n                        return new Array(word.length).fill('*').join('')\n                    }\n\n                    // if letter is over 2 letters long, uppercase it\n                    if (word_transformed.length > 2)\n                        word_transformed = word_transformed.toUpperCase()\n                    if (tickersSet.has(word_transformed)) {\n                        return `<a href=\"https://www.google.com/search?q=${word}+stock\"><strong>${word}</strong></a>`\n                    } else {\n                        return word\n                    }\n                })\n                .join('')\n    }\n\n    if (type === 'linkpost') {\n        // test if image link or regular link\n        if (body.match(/\\.(jpeg|jpg|gif|png)$/)) {\n            body = <a href={\"https://reddit.com\" + link}> <img src={body}/> </a>\n        } else {\n            body = <a href={body}>{body}</a>\n        }\n    } else {\n        body = addLinkAndFilter(body)\n    }\n\n    if (type === 'textpost') {\n        body = `<p>${body}</p>`\n        title = addLinkAndFilter(title)\n    }\n\n\n    return (\n        <div className='thread'>\n            {title && <div className='threadTitle'>\n                <a href={'https://www.reddit.com' + link} target='_blank'>\n                    <SanitizedHTML html={title} className='threadBody' />\n                </a>\n            </div>}\n            {type === ('linkpost') ? (\n                <div className='threadBody'>{body}</div>\n            ) : (\n                <SanitizedHTML html={body} className='threadBody'/>      \n            )}\n            <div className=\"threadInfo\">\n                <a href={'https://www.reddit.com' + link + (threadType === 'comment' ? '?context=8&depth=9' : '')} target='_blank'> <span>link <FaExternalLinkAlt className='linkIcon'/></span> </a>\n                <a href={'https://www.reddit.com'+link+(threadType === 'comment' ? '?context=8&depth=9' : '')} target='_blank'> <span>{threadType}</span> </a>\n                <a href={'https://www.reddit.com/r/'+subreddit} target='_blank'> <span className='threadSub'>r/{subreddit}</span> </a>\n                <a href={'https://www.reddit.com/u/'+author} target='_blank'> <span className='threadAuthor'>u/{author}</span> </a>\n            </div>\n        </div>\n    )\n}\n\nfunction SettingsPane({ show, setShow, blockOffensive, setBlockOffensive, onlyShowIfTicker, setOnlyShowIfTicker }) {\n    const hovering = useRef(false)\n    const showSty = {\n        maxHeight: '3em',\n        transition: 'all 0.5s ease',\n        overflow: 'hidden',\n        marginTop: '1em',\n        marginBottom: '1em',\n    }\n    \n    const noshowSty = {\n        maxHeight: 0,\n        transition: 'all 0.5s ease'\n    }\n    \n    const timeouts = useRef([])\n    function setTimeoutToClose() {\n        timeouts.current.forEach(clearTimeout)\n        timeouts.current.push(setTimeout(() => {\n            if (hovering.current === false) {\n                setShow(false)\n            } else {\n                setTimeoutToClose()\n            }\n        }, 2000))\n    }\n\n    useEffect(() => {\n        if (show === true) {\n            setTimeoutToClose()\n        }\n    }, [show])\n\n    function updateBlockOffensive(e) {\n        setBlockOffensive(e.target.checked)\n    }\n\n    function toggleBlockOffensive() {\n        setBlockOffensive(val => !val)\n    }\n\n    function updateOnlyShowIfTicker(e) {\n        setOnlyShowIfTicker(e.target.checked)\n    }\n\n    function toggleOnlyShowIfTicker(){\n        setOnlyShowIfTicker(val => !val)\n    }\n\n    return (\n        <div\n            className={`settingsPane ${show ? '' : 'hideOverflow'}`}\n            style={show ? showSty : noshowSty}\n            onMouseEnter={() => { hovering.current = true }}\n            onMouseLeave={() => { hovering.current = false }}\n        >\n            <div className='setting'>\n                <input type=\"checkbox\" checked={blockOffensive}\n                    onChange={(updateBlockOffensive)} />\n                <span onClick={toggleBlockOffensive}>Block offensive words</span>\n            </div>\n            \n            <div className='setting'>\n                <input type=\"checkbox\" checked={onlyShowIfTicker}\n                    onChange={(updateOnlyShowIfTicker)} />\n                <span onClick={toggleOnlyShowIfTicker}>Only show threads containing tickers</span>\n            </div>\n        </div>\n    )\n}\n\nfunction isTouchScreenDevice() {\n    return 'ontouchstart' in window || navigator.maxTouchPoints;      \n}\n\nexport default SocketWrapper;","/Users/davidcao/dev/RedditStocks/frontend/src/components/TickerTable.js",["74","75","76"],"import React, { useEffect, useState } from 'react'\nimport { useMediaQuery } from 'react-responsive'\n\nimport \"./TickerTable.sass\"\n\n// tickers: sorted by mentions in App.js\nexport default function ({ tickers, queryHour, setQueryHour }) {\n    const isWide = useMediaQuery({\n        query: '(min-width: 1025px)'\n    })\n    \n    // console.log('ticker table: ', tickers)\n    const tickerRows = []\n    tickers?.forEach(ticker => {\n        // if (ticker.mentions > 2) {\n            tickerRows.push(<TickerRow key={ticker['name']} {...ticker} />)\n        // }\n    })\n    if(tickerRows.length > 300) tickerRows.length = 300\n\n    if(!isWide && tickerRows.length > 20) tickerRows.length = 20\n    // console.log('ticker rows: ', tickerRows)\n\n    return (\n        <div className=\"stats\">\n            <h1>Stats</h1>\n            <ul className='hour-selectors'>\n                <li className={`hour-selector nav-link ${queryHour === 1 ? 'hour-selected' : ''}`} onClick={()=>setQueryHour(1)}>1H</li>\n                <li className={`hour-selector nav-link ${queryHour === 4 ? 'hour-selected' : ''}`} onClick={()=>setQueryHour(4)}>4H</li>\n                <li className={`hour-selector nav-link ${queryHour === 12 ? 'hour-selected' : ''}`} onClick={()=>setQueryHour(12)}>12H</li>\n                <li className={`hour-selector nav-link ${queryHour === 24 ? 'hour-selected' : ''}`} onClick={()=>setQueryHour(24)}>1D</li>\n                <li className={`hour-selector nav-link ${queryHour === 72 ? 'hour-selected' : ''}`} onClick={()=>setQueryHour(72)}>3D</li>\n                <li className={`hour-selector nav-link ${queryHour === 168 ? 'hour-selected' : ''}`} onClick={()=>setQueryHour(168)}>1W</li>\n            </ul>\n            <table className='table'>\n                <thead>\n                    <tr>\n                        <th className='tickerName'>Ticker</th>\n                        <th>Mentions</th>\n                        <th>Strength</th>\n                        <th>Positive</th>\n                        <th>Neutral</th>\n                        <th>Negative</th>\n                    </tr>\n                </thead>\n                { tickerRows.length === 0 ? (\n                    <tbody>\n                        <tr>\n                            <td colSpan=\"6\">\n                                <br />\n                                Not data in this time frame yet.\n                            </td>\n                        </tr>\n                    </tbody>\n                ) : (\n                    <tbody>\n                        { tickerRows }\n                    </tbody>\n                )}\n            </table>\n        </div>\n    )    \n}\n\nfunction TickerRow({ name, mentions, sentiment, positive_count, neutral_count, negative_count }) {\n\n    // const sent_percent = sent_cnt => sent_cnt > 0 ? (sent_cnt / total_sent_cnt * 100).toFixed(2) + '%' : null\n\n    // const blacklistSecret = localStorage.getItem(\"blacklistSecret\")\n    \n    // function blacklistTicker() {\n    //     axios.post(serverURL + \"blacklist_ticker\", {\n    //         ticker,\n    //         secret: blacklistSecret\n    //     })\n    //     setShow(false)\n    // }\n\n    function googleTicker() {\n        window.open(\"https://www.google.com/search?q=\" + name + \"+stock\",'_blank')\n    }\n\n    return (\n        <tr>\n            <td className='tickerName' onClick={googleTicker}>\n                { name }\n            </td>\n            <td>{mentions}</td>\n            <td>{(sentiment*100).toFixed(2)}</td>\n            <td>{Math.round((positive_count / mentions)*100)}%</td>\n            <td>{Math.round((neutral_count / mentions)*100)}%</td>\n            <td>{Math.round((negative_count / mentions)*100)}%</td>\n            {\n                    // blacklistSecret &&\n                    //     <ToolTip tooltext={'Blacklist this ticker'} className={styles.remove} onClick={blacklistTicker}>\n                    //         X\n                    //     </ToolTip>\n            }\n        </tr>\n    )\n}",{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":51,"column":8,"nodeType":"83","endLine":51,"endColumn":19,"suggestions":"84"},{"ruleId":"81","severity":1,"message":"85","line":133,"column":8,"nodeType":"83","endLine":133,"endColumn":10,"suggestions":"86"},{"ruleId":"87","severity":1,"message":"88","line":2,"column":17,"nodeType":"89","messageId":"90","endLine":2,"endColumn":26},{"ruleId":"91","severity":1,"message":"92","line":6,"column":1,"nodeType":"93","endLine":24,"endColumn":2},{"ruleId":"87","severity":1,"message":"88","line":2,"column":17,"nodeType":"89","messageId":"90","endLine":2,"endColumn":26},{"ruleId":"87","severity":1,"message":"94","line":2,"column":38,"nodeType":"89","messageId":"90","endLine":2,"endColumn":44},{"ruleId":"91","severity":1,"message":"92","line":6,"column":1,"nodeType":"93","endLine":67,"endColumn":2},{"ruleId":"87","severity":1,"message":"88","line":2,"column":17,"nodeType":"89","messageId":"90","endLine":2,"endColumn":26},{"ruleId":"87","severity":1,"message":"95","line":2,"column":28,"nodeType":"89","messageId":"90","endLine":2,"endColumn":36},{"ruleId":"87","severity":1,"message":"94","line":2,"column":38,"nodeType":"89","messageId":"90","endLine":2,"endColumn":44},{"ruleId":"91","severity":1,"message":"92","line":4,"column":1,"nodeType":"93","endLine":16,"endColumn":2},{"ruleId":"87","severity":1,"message":"88","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":26},{"ruleId":"87","severity":1,"message":"95","line":1,"column":28,"nodeType":"89","messageId":"90","endLine":1,"endColumn":36},{"ruleId":"87","severity":1,"message":"94","line":1,"column":38,"nodeType":"89","messageId":"90","endLine":1,"endColumn":44},{"ruleId":"91","severity":1,"message":"92","line":3,"column":1,"nodeType":"93","endLine":25,"endColumn":2},{"ruleId":"87","severity":1,"message":"96","line":27,"column":7,"nodeType":"89","messageId":"90","endLine":27,"endColumn":20},{"ruleId":"97","severity":1,"message":"98","line":100,"column":57,"nodeType":"99","messageId":"100","endLine":100,"endColumn":59},{"ruleId":"101","severity":1,"message":"102","line":119,"column":61,"nodeType":"103","messageId":"104","endLine":119,"endColumn":62,"suggestions":"105"},{"ruleId":"101","severity":1,"message":"106","line":119,"column":68,"nodeType":"103","messageId":"104","endLine":119,"endColumn":69,"suggestions":"107"},{"ruleId":"101","severity":1,"message":"108","line":119,"column":70,"nodeType":"103","messageId":"104","endLine":119,"endColumn":71,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":141,"column":59,"nodeType":"112","endLine":141,"endColumn":76},{"ruleId":"113","severity":1,"message":"114","line":158,"column":59,"nodeType":"115","endLine":158,"endColumn":74},{"ruleId":"113","severity":1,"message":"114","line":168,"column":116,"nodeType":"115","endLine":168,"endColumn":131},{"ruleId":"113","severity":1,"message":"114","line":169,"column":112,"nodeType":"115","endLine":169,"endColumn":127},{"ruleId":"113","severity":1,"message":"114","line":170,"column":65,"nodeType":"115","endLine":170,"endColumn":80},{"ruleId":"113","severity":1,"message":"114","line":171,"column":62,"nodeType":"115","endLine":171,"endColumn":77},{"ruleId":"81","severity":1,"message":"116","line":208,"column":8,"nodeType":"83","endLine":208,"endColumn":14,"suggestions":"117"},{"ruleId":"87","severity":1,"message":"88","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":26},{"ruleId":"87","severity":1,"message":"95","line":1,"column":28,"nodeType":"89","messageId":"90","endLine":1,"endColumn":36},{"ruleId":"91","severity":1,"message":"92","line":7,"column":1,"nodeType":"93","endLine":63,"endColumn":2},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateTickerList'. Either include it or remove the dependency array.","ArrayExpression",["120"],"React Hook useEffect has missing dependencies: 'queryHour' and 'updateTickerList'. Either include them or remove the dependency array.",["121"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'useRef' is defined but never used.","'useState' is defined but never used.","'badWordsRegex' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["122","123"],"Unnecessary escape character: \\^.",["124","125"],"Unnecessary escape character: \\*.",["126","127"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","React Hook useEffect has a missing dependency: 'setTimeoutToClose'. Either include it or remove the dependency array.",["128"],"no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},{"desc":"129","fix":"131"},{"messageId":"132","fix":"133","desc":"134"},{"messageId":"135","fix":"136","desc":"137"},{"messageId":"132","fix":"138","desc":"134"},{"messageId":"135","fix":"139","desc":"137"},{"messageId":"132","fix":"140","desc":"134"},{"messageId":"135","fix":"141","desc":"137"},{"desc":"142","fix":"143"},"Update the dependencies array to be: [queryHour, updateTickerList]",{"range":"144","text":"145"},{"range":"146","text":"145"},"removeEscape",{"range":"147","text":"148"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"149","text":"150"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"151","text":"148"},{"range":"152","text":"150"},{"range":"153","text":"148"},{"range":"154","text":"150"},"Update the dependencies array to be: [setTimeoutToClose, show]",{"range":"155","text":"156"},[1859,1870],"[queryHour, updateTickerList]",[5101,5103],[4338,4339],"",[4338,4338],"\\",[4345,4346],[4345,4345],[4347,4348],[4347,4347],[7652,7658],"[setTimeoutToClose, show]"]