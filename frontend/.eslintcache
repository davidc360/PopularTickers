[{"/Users/davidcao/dev/RedditStocks/frontend/src/index.js":"1","/Users/davidcao/dev/RedditStocks/frontend/src/App.js":"2","/Users/davidcao/dev/RedditStocks/frontend/src/reportWebVitals.js":"3","/Users/davidcao/dev/RedditStocks/frontend/src/components/Nav.js":"4","/Users/davidcao/dev/RedditStocks/frontend/src/components/TIckers.js":"5","/Users/davidcao/dev/RedditStocks/frontend/src/components/Contact.js":"6","/Users/davidcao/dev/RedditStocks/frontend/src/components/About.js":"7","/Users/davidcao/dev/RedditStocks/frontend/src/components/EnterSecret.js":"8","/Users/davidcao/dev/RedditStocks/frontend/src/components/Tickers.js":"9","/Users/davidcao/dev/RedditStocks/frontend/src/components/Socket.js":"10","/Users/davidcao/dev/RedditStocks/frontend/src/components/TickerTable.js":"11"},{"size":500,"mtime":1630103987137,"results":"12","hashOfConfig":"13"},{"size":5696,"mtime":1634780258118,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1630103987138,"results":"15","hashOfConfig":"13"},{"size":706,"mtime":1634775817364,"results":"16","hashOfConfig":"13"},{"size":6307,"mtime":1630536344903,"results":"17","hashOfConfig":"13"},{"size":772,"mtime":1634775817363,"results":"18","hashOfConfig":"13"},{"size":372,"mtime":1634775817362,"results":"19","hashOfConfig":"13"},{"size":915,"mtime":1630208182400,"results":"20","hashOfConfig":"13"},{"size":6308,"mtime":1633992765394,"results":"21","hashOfConfig":"13"},{"size":8053,"mtime":1634778886597,"results":"22","hashOfConfig":"13"},{"size":3711,"mtime":1634778886597,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"gvwl0a",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"26"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"26"},"/Users/davidcao/dev/RedditStocks/frontend/src/index.js",[],["57","58"],"/Users/davidcao/dev/RedditStocks/frontend/src/App.js",["59"],"/Users/davidcao/dev/RedditStocks/frontend/src/reportWebVitals.js",[],"/Users/davidcao/dev/RedditStocks/frontend/src/components/Nav.js",["60","61"],"import './Nav.sass'\nimport React, { useEffect } from 'react'\n\nimport { Link } from 'react-router-dom'\n\nexport default function () {\n   \n    return (\n        <nav className='nav'>\n            <h1 className='logo'>Popular Tickers</h1>\n            <ul className='nav-links'>\n                <Link to={'/'} target=\"_self\">\n                    <li className='nav-link'>Home</li>\n                </Link>\n                <Link to={'/about'} target=\"_self\">\n                    <li className='nav-link'>About</li>\n                </Link>\n                <Link to={'/contact'} target=\"_self\">\n                    <li className='nav-link'>Contact</li>\n                </Link>\n            </ul>\n        </nav>\n    )\n}","/Users/davidcao/dev/RedditStocks/frontend/src/components/TIckers.js",["62","63","64"],"import React, { useEffect, useState, useRef } from 'react'\nimport styles from \"./Tickers.module.sass\"\nimport './icons.css'\n\nimport axios from 'axios'\n\n// const serverURL = `https://redditstocks.herokuapp.com/`\nconst serverURL = 'http://127.0.0.1:5000/'\n\nconst subreddits = [\n    'wallstreetbets',\n    'stocks',\n    'pennystocks',\n    'spacs',\n    'investing',\n    'options',\n    'robinhood',\n]\n\n\nexport default function () {\n    return (\n        <div>\n            {\n                subreddits.map(sub => <TicksFromSub subreddit={sub}/>)\n            }\n        </div>\n    )\n}\n\nfunction TicksFromSub({ subreddit }) {\n    const [data, updateData] = useState()\n    const alreadySynced = useRef(false)\n\n    axios.get(serverURL + subreddit, {\n        headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS',\n        }})\n    .then(res => {\n        if (!alreadySynced.current) {\n            updateData(res.data)\n            alreadySynced.current = true   \n        }\n    })\n\n    let tickerRows = []\n    if (data) {\n        console.log(data['tickers'])\n        let keys = Object.keys(data.tickers)\n        // limit to 20 tickers\n        keys = keys.slice(0, 20)\n        // sort the tickers by mention count\n        keys.sort((a, b) => data.tickers[b].count - data.tickers[a].count )\n        \n        for (const key of keys) {\n            tickerRows.push(\n                <TickerRow {...data.tickers[key]} ticker={key} key={key}/>\n            )\n        }\n    }\n\n    const loaded = data ? true : false\n    const dataIsEmpty = !data || Object.keys(data.tickers).length == 0    \n\n    const noTickers = (\n        <div>Didn't find enough stocks being discussed.</div>\n    )\n    const tickerTable = (\n        <table className={styles.table}>\n            <thead>\n            <tr>\n                <th className={styles.left}>Ticker</th>\n                <th>Mentions</th>\n                <th>Positive Strength</th>\n                <th>Negative Strength</th>\n                <th>% positive</th>\n                <th>% Neutral</th>\n                <th>% Negative</th>\n            </tr>\n            </thead>\n            <tbody>{tickerRows}</tbody>\n        </table>\n    )\n    // last updated time\n    let newTime\n    let LUTTime\n    if (data) {\n        const date_from_data = data['last_updated'].slice(0, 10).split('-')\n        const time_from_data = data['last_updated'].slice(-8).split(':')\n        newTime = new Date(Date.UTC(...date_from_data, ...time_from_data))\n\n        const LUTDate = `${newTime.getUTCFullYear()}-${newTime.getUTCMonth()}-${newTime.getUTCDate()}`\n        const LUTHour = newTime.getHours() > 12 ? newTime.getHours()-12 : newTime.getHours()\n        const LUTMinute = newTime.getMinutes() > 10 ? newTime.getMinutes() : '0' + newTime.getMinutes()\n        LUTTime = LUTHour + ':' + LUTMinute\n        LUTTime = newTime.getHours() > 12 ? LUTTime+'PM' : LUTTime+'AM'\n        LUTTime = LUTDate+' '+LUTTime\n    }\n    const main_section = (\n        <>\n        <div className={styles.title}>\n            <h1 className={styles.sub}>r/{subreddit}</h1>\n            <div className={styles.lastUpdated}>\n                <p>Last updated:</p>\n                <p>{LUTTime}</p>\n            </div>\n        </div>\n        { dataIsEmpty ? noTickers : tickerTable } \n        </>\n    )\n    const loader = (\n        <>\n        <div class={styles.left}>{'Scraping data from r/' + subreddit + '... it can take a minute'}</div>\n        <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n        </>\n    )\n\n        \n    return (\n        <div className={styles.ctn}>\n            { loaded ? main_section : loader }\n        </div>\n    )\n}\n\nfunction ToolTip({ children, tooltext, className, childClassNames, onClick }) {\n    const [pos, setPos] = useState()\n    const [showChild, setShow] = useState(false)\n    function updatePos(e) {\n        setShow(true)\n        setPos({\n            left: e.clientX + 15,\n            top: e.clientY + 10,\n        })    \n    }\n    return (\n        <div\n            className={`${className} ${styles.tooltip}`}\n            onMouseMove={updatePos}\n            onMouseLeave={() => setShow(false)}\n            onClick={onClick}\n        >\n            {children}\n            {showChild && (\n                <div\n                    className={`${childClassNames} ${styles.tooltext}`}\n                    style={pos ? pos : null}\n                >\n                    {tooltext}\n                </div>\n            )} \n        </div>\n    )\n}\n\nfunction TickerRow({ ticker, count, pos_sent, pos_sent_cnt=0, neg_sent, neg_sent_cnt=0, neut_sent_cnt=0}) {\n    const [show, setShow] = useState(true)\n    let total_sent_cnt = pos_sent_cnt + neg_sent_cnt + neut_sent_cnt\n    const pos_strength = pos_sent && (pos_sent*100).toFixed(0)\n    const neg_strength = neg_sent && (neg_sent*100).toFixed(0)\n\n    const sent_percent = sent_cnt => sent_cnt > 0 ? (sent_cnt / total_sent_cnt * 100).toFixed(2) + '%' : null\n\n    const blacklistSecret = localStorage.getItem(\"blacklistSecret\")\n    \n    function blacklistTicker() {\n        axios.post(serverURL + \"blacklist_ticker\", {\n            ticker,\n            secret: blacklistSecret\n        })\n        setShow(false)\n    }\n\n    function googleTicker() {\n        window.open(\"https://www.google.com/search?q=\" + ticker,'_blank')\n    }\n    if(!show) return null\n    return (\n        <tr>\n            <td className={`${styles.left}`} onClick={googleTicker}>\n                {\n                    blacklistSecret ?\n                        <ToolTip tooltext={'Open chart'} >\n                            {ticker}\n                        </ToolTip>\n                        : ticker\n                }\n            </td>\n            <td>{count}</td>\n            <td>{pos_strength || 0}</td>\n            <td>{neg_strength || 0}</td>\n            <td>{sent_percent(pos_sent_cnt) || \"0%\"}</td>\n            <td>{sent_percent(neut_sent_cnt) || \"0%\"}</td>\n            <td>{sent_percent(neg_sent_cnt) || \"0%\"}</td>\n            {\n                    blacklistSecret &&\n                        <ToolTip tooltext={'Blacklist this ticker'} className={styles.remove} onClick={blacklistTicker}>\n                            X\n                        </ToolTip>\n            }\n        </tr>\n    )\n}\n",["65","66"],"/Users/davidcao/dev/RedditStocks/frontend/src/components/Contact.js",["67","68","69","70"],"import './Contact.sass'\nimport React, { useEffect, useState, useRef } from 'react'\n\nexport default function () {\n    \n    return (\n        <div className='contact'>            \n            <h1>\n                Contact\n            </h1>\n            <div>\n                    Suggestions? Comments?\n            </div>\n            <br/>\n            <div className='contact-comment'>\n                <textarea className='contact-text-area' name=\"\" id=\"\" cols=\"30\" rows=\"10\" value=\"Not yet implemented.\" readOnly></textarea>\n                <br/>\n                <div className='submit'>\n                    Submit\n                </div>\n            </div>\n            <br/>\n            <br />\n            <a href=\"/\" target=\"_self\">👈 Back to home</a>\n        </div>\n    )\n}","/Users/davidcao/dev/RedditStocks/frontend/src/components/About.js",["71","72","73","74"],"import './About.sass'\nimport React, { useEffect, useState, useRef } from 'react'\n\nexport default function () {\n    \n    return (\n        <div className='about'>            \n            <h1>\n                Find out what stocks Reddit is talking about!\n            </h1>\n\n            <br/>\n            <a href=\"/\" target=\"_self\">👈 Back to home</a>\n        </div>\n    )\n}","/Users/davidcao/dev/RedditStocks/frontend/src/components/EnterSecret.js",["75","76","77","78"],"import React, { useEffect, useState, useRef } from 'react'\n\nexport default function () {\n    function storeSecret() {\n        const secret = document.querySelector('#textArea').value\n        localStorage.setItem(\"blacklistSecret\", secret)\n        document.querySelector(\"#currentSecret\").textContent = localStorage.getItem(\"blacklistSecret\")\n    }\n    \n    return (\n        <div className='about'>            \n            <div className='contact-comment'>\n                <p id=\"currentSecret\">{localStorage.getItem(\"blacklistSecret\") || \"\"}</p>\n                <textarea className='contact-text-area' name=\"\" id=\"textArea\" cols=\"30\" rows=\"10\"></textarea>\n                <br/>\n                <div className='submit' onClick={storeSecret}>\n                    Submit\n                </div>\n            </div>\n            <br/>\n            <br />\n            <a href=\"/\">👈 Back to home</a>\n        </div>\n    )\n}","/Users/davidcao/dev/RedditStocks/frontend/src/components/Tickers.js",["79","80","81"],"import React, { useEffect, useState, useRef } from 'react'\nimport styles from \"./Tickers.module.sass\"\nimport './icons.css'\n\nimport axios from 'axios'\n\n// const serverURL = `https://redditstocks.herokuapp.com/`\nconst serverURL = 'http://127.0.0.1:5000/'\n\nconst subreddits = [\n    'wallstreetbets',\n    'stocks',\n    'pennystocks',\n    'spacs',\n    'investing',\n    'options',\n    'robinhood',\n]\n\n\nexport default function () {\n    return (\n        <div>\n            {\n                subreddits.map(sub => <TicksFromSub subreddit={sub}/>)\n            }\n        </div>\n    )\n}\n\nfunction TicksFromSub({ subreddit }) {\n    const [data, updateData] = useState()\n    const alreadySynced = useRef(false)\n\n    axios.get(serverURL + subreddit, {\n        headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS',\n        }})\n    .then(res => {\n        if (!alreadySynced.current) {\n            updateData(res.data)\n            alreadySynced.current = true   \n        }\n    })\n\n    let tickerRows = []\n    if (data) {\n        console.log(data['tickers'])\n        let keys = Object.keys(data.tickers)\n        // limit to 20 tickers\n        keys = keys.slice(0, 20)\n        // sort the tickers by mention count\n        keys.sort((a, b) => data.tickers[b].count - data.tickers[a].count )\n        \n        for (const key of keys) {\n            tickerRows.push(\n                <TickerRow {...data.tickers[key]} ticker={key} key={key}/>\n            )\n        }\n    }\n\n    const loaded = data ? true : false\n    const dataIsEmpty = !data || Object.keys(data.tickers).length == 0    \n\n    const noTickers = (\n        <div>Didn't find enough stocks being discussed.</div>\n    )\n\n    const tickerTable = (\n        <table className={styles.table}>\n            <thead>\n            <tr>\n                <th className={styles.left}>Ticker</th>\n                <th>Mentions</th>\n                <th>Positive Strength</th>\n                <th>Negative Strength</th>\n                <th>% positive</th>\n                <th>% Neutral</th>\n                <th>% Negative</th>\n            </tr>\n            </thead>\n            <tbody>{tickerRows}</tbody>\n        </table>\n    )\n    // last updated time\n    let newTime\n    let LUTTime\n    if (data) {\n        const date_from_data = data['last_updated'].slice(0, 10).split('-')\n        const time_from_data = data['last_updated'].slice(-8).split(':')\n        newTime = new Date(Date.UTC(...date_from_data, ...time_from_data))\n\n        const LUTDate = `${newTime.getUTCFullYear()}-${newTime.getUTCMonth()}-${newTime.getUTCDate()}`\n        const LUTHour = newTime.getHours() > 12 ? newTime.getHours()-12 : newTime.getHours()\n        const LUTMinute = newTime.getMinutes() > 10 ? newTime.getMinutes() : '0' + newTime.getMinutes()\n        LUTTime = LUTHour + ':' + LUTMinute\n        LUTTime = newTime.getHours() > 12 ? LUTTime+'PM' : LUTTime+'AM'\n        LUTTime = LUTDate+' '+LUTTime\n    }\n    const main_section = (\n        <>\n        <div className={styles.title}>\n            <h1 className={styles.sub}>r/{subreddit}</h1>\n            <div className={styles.lastUpdated}>\n                <p>Last updated:</p>\n                <p>{LUTTime}</p>\n            </div>\n        </div>\n        { dataIsEmpty ? noTickers : tickerTable } \n        </>\n    )\n    const loader = (\n        <>\n        <div class={styles.left}>{'Scraping data from r/' + subreddit + '... it can take a minute'}</div>\n        <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n        </>\n    )\n\n        \n    return (\n        <div className={styles.ctn}>\n            { loaded ? main_section : loader }\n        </div>\n    )\n}\n\nfunction ToolTip({ children, tooltext, className, childClassNames, onClick }) {\n    const [pos, setPos] = useState()\n    const [showChild, setShow] = useState(false)\n    function updatePos(e) {\n        setShow(true)\n        setPos({\n            left: e.clientX + 15,\n            top: e.clientY + 10,\n        })    \n    }\n    return (\n        <div\n            className={`${className} ${styles.tooltip}`}\n            onMouseMove={updatePos}\n            onMouseLeave={() => setShow(false)}\n            onClick={onClick}\n        >\n            {children}\n            {showChild && (\n                <div\n                    className={`${childClassNames} ${styles.tooltext}`}\n                    style={pos ? pos : null}\n                >\n                    {tooltext}\n                </div>\n            )} \n        </div>\n    )\n}\n\nfunction TickerRow({ ticker, count, pos_sent, pos_sent_cnt=0, neg_sent, neg_sent_cnt=0, neut_sent_cnt=0}) {\n    const [show, setShow] = useState(true)\n    let total_sent_cnt = pos_sent_cnt + neg_sent_cnt + neut_sent_cnt\n    const pos_strength = pos_sent && (pos_sent*100).toFixed(0)\n    const neg_strength = neg_sent && (neg_sent*100).toFixed(0)\n\n    const sent_percent = sent_cnt => sent_cnt > 0 ? (sent_cnt / total_sent_cnt * 100).toFixed(2) + '%' : null\n\n    const blacklistSecret = localStorage.getItem(\"blacklistSecret\")\n    \n    function blacklistTicker() {\n        axios.post(serverURL + \"blacklist_ticker\", {\n            ticker,\n            secret: blacklistSecret\n        })\n        setShow(false)\n    }\n\n    function googleTicker() {\n        window.open(\"https://www.google.com/search?q=\" + ticker,'_blank')\n    }\n    if(!show) return null\n    return (\n        <tr>\n            <td className={`${styles.left}`} onClick={googleTicker}>\n                {\n                    blacklistSecret ?\n                        <ToolTip tooltext={'Open chart'} >\n                            {ticker}\n                        </ToolTip>\n                        : ticker\n                }\n            </td>\n            <td>{count}</td>\n            <td>{pos_strength || 0}</td>\n            <td>{neg_strength || 0}</td>\n            <td>{sent_percent(pos_sent_cnt) || \"0%\"}</td>\n            <td>{sent_percent(neut_sent_cnt) || \"0%\"}</td>\n            <td>{sent_percent(neg_sent_cnt) || \"0%\"}</td>\n            {\n                    blacklistSecret &&\n                        <ToolTip tooltext={'Blacklist this ticker'} className={styles.remove} onClick={blacklistTicker}>\n                            X\n                        </ToolTip>\n            }\n        </tr>\n    )\n}\n",["82","83"],"/Users/davidcao/dev/RedditStocks/frontend/src/components/Socket.js",["84","85","86","87","88","89","90","91","92","93","94"],"import './Socket.sass'\nimport React, { useState, useEffect, useRef } from \"react\"\nimport SanitizedHTML from 'react-sanitized-html';\n\nimport { FaCog } from 'react-icons/fa'\n\nconst badWords = new Set([\n    'fuck',\n    'fucking',\n    'bitch',\n    'shit',\n    'ass',\n    'cunt',\n    'retard',\n    'rtard',\n    'jerk',\n    'fuk',\n    'fuckin',\n    'fukin',\n    'kink',\n    'ass',\n    'pussy',\n    'cuck'\n])\n\nconst badWordsRegexPattern = `(${[...badWords].join('|')})`\nconst badWordsRegex = new RegExp(badWordsRegexPattern, \"gi\")\n\nfunction SocketWrapper({ threads }) {\n    const [isHovering, setIsHovering] = useState(false)\n    const [showSettings, setShowSettings] = useState(false)\n    const [blockOffensive, setBlockOffensive] = useState(true)\n    const [onlyShowIfTicker, setOnlyShowIfTicker] = useState(false)\n\n    function toggleShowSettings() {\n        setShowSettings(show => !show)\n    }\n\n    useEffect(() => {\n        console.log(threads)\n    }, [threads])\n\n    return (\n        <div className='threadsCtn'>\n            <h1 className='center title threadsHeading'>\n                <div className='titleWrapper'>\n                    {isHovering ? '(Paused on Mouse Hover)' : 'Latest'}\n                </div>\n                <div className='cogWrapper'> <FaCog className=\"settingsToggle\" onClick={toggleShowSettings} /> </div>\n            </h1>\n            <SettingsPane show={showSettings} setShow={setShowSettings}\n                blockOffensive={blockOffensive} setBlockOffensive={setBlockOffensive}\n                onlyShowIfTicker={onlyShowIfTicker} setOnlyShowIfTicker={setOnlyShowIfTicker}\n            />\n            <Socket threads={threads} isHovering={isHovering}\n                setHover={setIsHovering} blockOffensive={blockOffensive}\n                onlyShowIfTicker={onlyShowIfTicker}\n            />\n        </div>\n    )\n}\n\n// abstract away the socket component and only update it when mouse is not hovering\nconst Socket = React.memo(function Socket({ threads, isHovering, setHover, blockOffensive, onlyShowIfTicker }) {\n    // Turn thread informations into thread elements\n    const postElements = threads?.map(thread => (\n        <RedditPost {...thread}\n            key={thread.body + thread.link} blockOffensive={blockOffensive}\n            onlyShowIfTicker={onlyShowIfTicker}\n        />\n    ))\n\n    return (\n        <div className='threads' onMouseOver={()=>setHover(true)} onMouseLeave={()=>setHover(false)}>\n            {postElements}\n            <RedditPost\n                body='<p>Welcome to popular tickers!</p>'\n                subreddit='all'\n                author='david'\n                type='comment'\n                blockOffensive={blockOffensive}\n                onlyShowIfTicker={onlyShowIfTicker}\n            />\n        </div>\n    );\n}, (prevPros, nextProps) => nextProps.isHovering)\n\nfunction RedditPost({ title, body, author, subreddit, link, tickers, type, blockOffensive, onlyShowIfTicker }) {\n    if (onlyShowIfTicker && (!tickers || tickers.length == 0)) {\n        return null\n    }\n    const threadType = title ? 'post' : 'comment'\n    // convert tickers to a set\n    const tickersSet = new Set(tickers?.map(ticker => ticker['name']))\n\n    // bold tickers found in the content\n    // first strip word from punctuation, and transform to uppercase\n    // then check if the ticker list\n    // console.log(type, body, link)\n    // console.log(tickerList.has(\"->\".replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").replace(/<.+?>/g, \"\").toUpperCase()))\n    if (type === 'linkpost') {\n        // test if image link or regular link\n        if (body.match(/\\.(jpeg|jpg|gif|png)$/)) {\n            body = <a href={\"https://reddit.com\" + link}> <img src={body}/> </a>\n        } else {\n            body = <a href={body}>{body}</a>\n        }\n    } else {\n        body = body\n                    // spit words by non alphabetic chars and ' (apostrophe)\n                    // the split keeps the deliminator\n                    .split(/([?<> .,-])/gi)\n                    .map(word => {\n                        // remove punctuation\n                        let word_transformed = word.replace(/[.,\\/#!?$%\\^\\*;:{}=\\-_`~()]/g, \"\")\n\n                        // if filter bad words,turn bad words into asterisks\n                        if (blockOffensive && badWords.has(word_transformed.toLowerCase())) {\n                            return new Array(word.length).fill('*').join('')\n                        }\n\n                        // if letter is over 2 letters long, uppercase it\n                        if (word_transformed.length > 2)\n                            word_transformed = word_transformed.toUpperCase()\n                        if (tickersSet.has(word_transformed)) {\n                            return `<a href=\"https://www.google.com/search?q=${word}+stock\"><strong>${word}</strong></a>`\n                        } else {\n                            return word\n                        }\n                    })\n                    .join('')\n    }\n\n    if (type === 'textpost') {\n        body = `<p>${body}</p>`\n    }\n\n\n    return (\n        <div className='thread'>\n            <div className='threadTitle'><a href={'https://www.reddit.com'+link} target='_blank'> {title} </a></div>\n            {type === ('linkpost') ? (\n                <div className='threadBody'>{body}</div>\n                // <SanitizedHTML html={`<p>${body}</p>`} className='threadBody'/>      \n            ) : (\n                <SanitizedHTML html={body} className='threadBody'/>      \n            )}\n            <div className=\"threadInfo\">\n                <a href={'https://www.reddit.com'+link+(threadType === 'comment' ? '?context=8&depth=9' : '')} target='_blank'> <span>{threadType}</span> </a>\n                <a href={'https://www.reddit.com/r/'+subreddit} target='_blank'> <span className='threadSub'>r/{subreddit}</span> </a>\n                <a href={'https://www.reddit.com/u/'+author} target='_blank'> <span className='threadAuthor'>u/{author}</span> </a>\n            </div>\n        </div>\n    )\n}\n\nfunction SettingsPane({ show, setShow, blockOffensive, setBlockOffensive, onlyShowIfTicker, setOnlyShowIfTicker }) {\n    const hovering = useRef(false)\n    const showSty = {\n        maxHeight: '2.5em',\n        transition: 'max-height 0.5s ease',\n        overflow: 'hidden'\n    }\n    \n    const noshowSty = {\n        maxHeight: 0,\n        transition: 'max-height 0.5s ease'\n    }\n    \n    const timeouts = useRef([])\n    function setTimeoutToClose() {\n        timeouts.current.forEach(clearTimeout)\n        timeouts.current.push(setTimeout(() => {\n            if (hovering.current === false) {\n                setShow(false)\n            } else {\n                setTimeoutToClose()\n            }\n        }, 2000))\n    }\n\n    useEffect(() => {\n        if (show === true) {\n            setTimeoutToClose()\n        }\n    }, [show])\n\n    function updateBlockOffensive(e) {\n        setBlockOffensive(e.target.checked)\n    }\n\n    function toggleBlockOffensive() {\n        setBlockOffensive(val => !val)\n    }\n\n    function updateOnlyShowIfTicker(e) {\n        setOnlyShowIfTicker(e.target.checked)\n    }\n\n    function toggleOnlyShowIfTicker(){\n        setOnlyShowIfTicker(val => !val)\n    }\n\n    return (\n        <div\n            className={`settingsPane ${show ? '' : 'hideOverflow'}`}\n            style={show ? showSty : noshowSty}\n            onMouseEnter={() => { hovering.current = true }}\n            onMouseLeave={() => { hovering.current = false }}\n        >\n            <div className='setting'>\n                <input type=\"checkbox\" checked={blockOffensive}\n                    onChange={(updateBlockOffensive)} />\n                <span onClick={toggleBlockOffensive}>Block offensive words</span>\n            </div>\n            \n            <div className='setting'>\n                <input type=\"checkbox\" checked={onlyShowIfTicker}\n                    onChange={(updateOnlyShowIfTicker)} />\n                <span onClick={toggleOnlyShowIfTicker}>Only show threads containing tickers</span>\n            </div>\n        </div>\n    )\n}\n\nexport default SocketWrapper;","/Users/davidcao/dev/RedditStocks/frontend/src/components/TickerTable.js",["95","96","97"],"import React, { useEffect, useState } from 'react'\nimport \"./TickerTable.sass\"\n\n// tickers: sorted by mentions in App.js\nexport default function ({ tickers }) {\n    // console.log('ticker table: ', tickers)\n    const tickerRows = tickers?.map(ticker => (\n        ticker.mentions > 2 ?\n            <TickerRow key={ticker['name']} {...ticker} />\n            : null\n    ))\n    // console.log('ticker rows: ', tickerRows)\n\n    return (\n        <div className=\"stats\">\n            <h1>Stats</h1>\n                <table className='table'>\n                    <thead>\n                        <tr>\n                            <th className='left'>Ticker</th>\n                            <th>Mentions</th>\n                            <th>Sentiment</th>\n                            <th>Positive</th>\n                            <th>Neutral</th>\n                            <th>Negative</th>\n                        </tr>\n                    </thead>\n                    { tickers.length === 0 ? (\n                        <div>\n                            <br />\n                            Not data in this time frame yet.\n                        </div>\n                    ) : (\n                        <tbody>\n                            { tickerRows }\n                        </tbody>\n                    )}\n                </table>\n        </div>\n    )    \n}\n\nfunction TickerRow({ name, mentions, sentiment, positive_count, neutral_count, negative_count }) {\n\n    // const sent_percent = sent_cnt => sent_cnt > 0 ? (sent_cnt / total_sent_cnt * 100).toFixed(2) + '%' : null\n\n    // const blacklistSecret = localStorage.getItem(\"blacklistSecret\")\n    \n    // function blacklistTicker() {\n    //     axios.post(serverURL + \"blacklist_ticker\", {\n    //         ticker,\n    //         secret: blacklistSecret\n    //     })\n    //     setShow(false)\n    // }\n\n    function googleTicker() {\n        window.open(\"https://www.google.com/search?q=\" + name,'_blank')\n    }\n\n    return (\n        <tr>\n            <td className='tickerName' onClick={googleTicker}>\n                { name }\n            </td>\n            <td>{mentions}</td>\n            <td>{sentiment >= 0 ? '+' : ''}{(sentiment*100).toFixed(2)}</td>\n            <td>{Math.round((positive_count / mentions)*100)}%</td>\n            <td>{Math.round((neutral_count / mentions)*100)}%</td>\n            <td>{Math.round((negative_count / mentions)*100)}%</td>\n            {\n                    // blacklistSecret &&\n                    //     <ToolTip tooltext={'Blacklist this ticker'} className={styles.remove} onClick={blacklistTicker}>\n                    //         X\n                    //     </ToolTip>\n            }\n        </tr>\n    )\n}",{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":45,"column":8,"nodeType":"104","endLine":45,"endColumn":19,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":2,"column":17,"nodeType":"108","messageId":"109","endLine":2,"endColumn":26},{"ruleId":"110","severity":1,"message":"111","line":6,"column":1,"nodeType":"112","endLine":24,"endColumn":2},{"ruleId":"106","severity":1,"message":"107","line":1,"column":17,"nodeType":"108","messageId":"109","endLine":1,"endColumn":26},{"ruleId":"110","severity":1,"message":"111","line":21,"column":1,"nodeType":"112","endLine":29,"endColumn":2},{"ruleId":"113","severity":1,"message":"114","line":64,"column":67,"nodeType":"115","messageId":"116","endLine":64,"endColumn":69},{"ruleId":"98","replacedBy":"117"},{"ruleId":"100","replacedBy":"118"},{"ruleId":"106","severity":1,"message":"107","line":2,"column":17,"nodeType":"108","messageId":"109","endLine":2,"endColumn":26},{"ruleId":"106","severity":1,"message":"119","line":2,"column":28,"nodeType":"108","messageId":"109","endLine":2,"endColumn":36},{"ruleId":"106","severity":1,"message":"120","line":2,"column":38,"nodeType":"108","messageId":"109","endLine":2,"endColumn":44},{"ruleId":"110","severity":1,"message":"111","line":4,"column":1,"nodeType":"112","endLine":27,"endColumn":2},{"ruleId":"106","severity":1,"message":"107","line":2,"column":17,"nodeType":"108","messageId":"109","endLine":2,"endColumn":26},{"ruleId":"106","severity":1,"message":"119","line":2,"column":28,"nodeType":"108","messageId":"109","endLine":2,"endColumn":36},{"ruleId":"106","severity":1,"message":"120","line":2,"column":38,"nodeType":"108","messageId":"109","endLine":2,"endColumn":44},{"ruleId":"110","severity":1,"message":"111","line":4,"column":1,"nodeType":"112","endLine":16,"endColumn":2},{"ruleId":"106","severity":1,"message":"107","line":1,"column":17,"nodeType":"108","messageId":"109","endLine":1,"endColumn":26},{"ruleId":"106","severity":1,"message":"119","line":1,"column":28,"nodeType":"108","messageId":"109","endLine":1,"endColumn":36},{"ruleId":"106","severity":1,"message":"120","line":1,"column":38,"nodeType":"108","messageId":"109","endLine":1,"endColumn":44},{"ruleId":"110","severity":1,"message":"111","line":3,"column":1,"nodeType":"112","endLine":25,"endColumn":2},{"ruleId":"106","severity":1,"message":"107","line":1,"column":17,"nodeType":"108","messageId":"109","endLine":1,"endColumn":26},{"ruleId":"110","severity":1,"message":"111","line":21,"column":1,"nodeType":"112","endLine":29,"endColumn":2},{"ruleId":"113","severity":1,"message":"114","line":64,"column":67,"nodeType":"115","messageId":"116","endLine":64,"endColumn":69},{"ruleId":"98","replacedBy":"121"},{"ruleId":"100","replacedBy":"122"},{"ruleId":"106","severity":1,"message":"123","line":27,"column":7,"nodeType":"108","messageId":"109","endLine":27,"endColumn":20},{"ruleId":"113","severity":1,"message":"114","line":89,"column":57,"nodeType":"115","messageId":"116","endLine":89,"endColumn":59},{"ruleId":"124","severity":1,"message":"125","line":104,"column":59,"nodeType":"126","endLine":104,"endColumn":76},{"ruleId":"127","severity":1,"message":"128","line":115,"column":65,"nodeType":"129","messageId":"130","endLine":115,"endColumn":66,"suggestions":"131"},{"ruleId":"127","severity":1,"message":"132","line":115,"column":72,"nodeType":"129","messageId":"130","endLine":115,"endColumn":73,"suggestions":"133"},{"ruleId":"127","severity":1,"message":"134","line":115,"column":74,"nodeType":"129","messageId":"130","endLine":115,"endColumn":75,"suggestions":"135"},{"ruleId":"136","severity":1,"message":"137","line":141,"column":82,"nodeType":"138","endLine":141,"endColumn":97},{"ruleId":"136","severity":1,"message":"137","line":149,"column":112,"nodeType":"138","endLine":149,"endColumn":127},{"ruleId":"136","severity":1,"message":"137","line":150,"column":65,"nodeType":"138","endLine":150,"endColumn":80},{"ruleId":"136","severity":1,"message":"137","line":151,"column":62,"nodeType":"138","endLine":151,"endColumn":77},{"ruleId":"102","severity":1,"message":"139","line":186,"column":8,"nodeType":"104","endLine":186,"endColumn":14,"suggestions":"140"},{"ruleId":"106","severity":1,"message":"107","line":1,"column":17,"nodeType":"108","messageId":"109","endLine":1,"endColumn":26},{"ruleId":"106","severity":1,"message":"119","line":1,"column":28,"nodeType":"108","messageId":"109","endLine":1,"endColumn":36},{"ruleId":"110","severity":1,"message":"111","line":5,"column":1,"nodeType":"112","endLine":55,"endColumn":2},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateTickerList'. Either include it or remove the dependency array.","ArrayExpression",["143"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["141"],["142"],"'useState' is defined but never used.","'useRef' is defined but never used.",["141"],["142"],"'badWordsRegex' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["144","145"],"Unnecessary escape character: \\^.",["146","147"],"Unnecessary escape character: \\*.",["148","149"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","React Hook useEffect has a missing dependency: 'setTimeoutToClose'. Either include it or remove the dependency array.",["150"],"no-global-assign","no-unsafe-negation",{"desc":"151","fix":"152"},{"messageId":"153","fix":"154","desc":"155"},{"messageId":"156","fix":"157","desc":"158"},{"messageId":"153","fix":"159","desc":"155"},{"messageId":"156","fix":"160","desc":"158"},{"messageId":"153","fix":"161","desc":"155"},{"messageId":"156","fix":"162","desc":"158"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [queryHour, updateTickerList]",{"range":"165","text":"166"},"removeEscape",{"range":"167","text":"168"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"169","text":"170"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"171","text":"168"},{"range":"172","text":"170"},{"range":"173","text":"168"},{"range":"174","text":"170"},"Update the dependencies array to be: [setTimeoutToClose, show]",{"range":"175","text":"176"},[1712,1723],"[queryHour, updateTickerList]",[4089,4090],"",[4089,4089],"\\",[4096,4097],[4096,4096],[4098,4099],[4098,4098],[6807,6813],"[setTimeoutToClose, show]"]